'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _electronBuilder = require('electron-builder');

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wrapper for electron-builder.
 */
var InstallerBuilder = function () {

    /**
     * @param {MeteorDesktop} $ - context
     *
     * @constructor
     */
    function InstallerBuilder($) {
        (0, _classCallCheck3.default)(this, InstallerBuilder);

        this.log = new _log2.default('installerBuilder');
        this.$ = $;
    }

    (0, _createClass3.default)(InstallerBuilder, [{
        key: 'build',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
                var settings, arch, targets, target;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                // Move node_modules away. We do not want to delete it, just temporarily remove it from
                                // our way.
                                _shelljs2.default.mv(this.$.env.paths.electronApp.nodeModules, this.$.env.paths.electronApp.tmpNodeModules);

                                settings = this.$.desktop.getSettings();

                                if (!('builderOptions' in settings)) {
                                    this.log.error('no builderOptions in settings.json, aborting');
                                    process.exit(1);
                                }

                                // We are handling asar'ing and rebuilding in the normal run/build flow so we do not
                                // want electron-rebuild to do that.
                                settings.builderOptions.asar = false;
                                settings.builderOptions.npmRebuild = true;

                                arch = this.$.env.options.ia32 ? 'ia32' : 'x64';


                                arch = this.$.env.options.allArchs ? 'all' : arch;

                                targets = [];


                                if (this.$.env.options.win) {
                                    targets.push(_electronBuilder.Platform.WINDOWS);
                                }
                                if (this.$.env.options.linux) {
                                    targets.push(_electronBuilder.Platform.LINUX);
                                }
                                if (this.$.env.options.mac) {
                                    targets.push(_electronBuilder.Platform.MAC);
                                }

                                if (targets.length === 0) {
                                    if (this.$.env.os.isWindows) {
                                        targets.push(_electronBuilder.Platform.WINDOWS);
                                    } else if (this.$.env.os.isLinux) {
                                        targets.push(_electronBuilder.Platform.LINUX);
                                    } else {
                                        targets.push(_electronBuilder.Platform.MAC);
                                    }
                                }

                                target = (0, _electronBuilder.createTargets)(targets, null, arch);
                                _context.prev = 13;
                                _context.next = 16;
                                return (0, _electronBuilder.build)({
                                    targets: target,
                                    devMetadata: {
                                        directories: {
                                            app: this.$.env.paths.electronApp.root,
                                            output: _path2.default.join(this.$.env.options.output, this.$.env.paths.installerDir)
                                        },
                                        build: settings.builderOptions
                                    }
                                });

                            case 16:
                                _context.next = 21;
                                break;

                            case 18:
                                _context.prev = 18;
                                _context.t0 = _context['catch'](13);

                                this.log.error('error while building installer: ', _context.t0);

                            case 21:
                                _context.prev = 21;

                                // Move node_modules back.
                                _shelljs2.default.mv(this.$.env.paths.electronApp.tmpNodeModules, this.$.env.paths.electronApp.nodeModules);
                                return _context.finish(21);

                            case 24:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[13, 18, 21, 24]]);
            }));

            function build() {
                return _ref.apply(this, arguments);
            }

            return build;
        }()
    }]);
    return InstallerBuilder;
}();

exports.default = InstallerBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9pbnN0YWxsZXJCdWlsZGVyLmpzIl0sIm5hbWVzIjpbIkluc3RhbGxlckJ1aWxkZXIiLCIkIiwibG9nIiwibXYiLCJlbnYiLCJwYXRocyIsImVsZWN0cm9uQXBwIiwibm9kZU1vZHVsZXMiLCJ0bXBOb2RlTW9kdWxlcyIsInNldHRpbmdzIiwiZGVza3RvcCIsImdldFNldHRpbmdzIiwiZXJyb3IiLCJwcm9jZXNzIiwiZXhpdCIsImJ1aWxkZXJPcHRpb25zIiwiYXNhciIsIm5wbVJlYnVpbGQiLCJhcmNoIiwib3B0aW9ucyIsImlhMzIiLCJhbGxBcmNocyIsInRhcmdldHMiLCJ3aW4iLCJwdXNoIiwiV0lORE9XUyIsImxpbnV4IiwiTElOVVgiLCJtYWMiLCJNQUMiLCJsZW5ndGgiLCJvcyIsImlzV2luZG93cyIsImlzTGludXgiLCJ0YXJnZXQiLCJkZXZNZXRhZGF0YSIsImRpcmVjdG9yaWVzIiwiYXBwIiwicm9vdCIsIm91dHB1dCIsImpvaW4iLCJpbnN0YWxsZXJEaXIiLCJidWlsZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7OztJQUdxQkEsZ0I7O0FBRWpCOzs7OztBQUtBLDhCQUFZQyxDQUFaLEVBQWU7QUFBQTs7QUFDWCxhQUFLQyxHQUFMLEdBQVcsa0JBQVEsa0JBQVIsQ0FBWDtBQUNBLGFBQUtELENBQUwsR0FBU0EsQ0FBVDtBQUNIOzs7Ozs7Ozs7OztBQUdHO0FBQ0E7QUFDQSxrREFBTUUsRUFBTixDQUNJLEtBQUtGLENBQUwsQ0FBT0csR0FBUCxDQUFXQyxLQUFYLENBQWlCQyxXQUFqQixDQUE2QkMsV0FEakMsRUFFSSxLQUFLTixDQUFMLENBQU9HLEdBQVAsQ0FBV0MsS0FBWCxDQUFpQkMsV0FBakIsQ0FBNkJFLGNBRmpDOztBQUtNQyx3QyxHQUFXLEtBQUtSLENBQUwsQ0FBT1MsT0FBUCxDQUFlQyxXQUFmLEU7O0FBQ2pCLG9DQUFJLEVBQUUsb0JBQW9CRixRQUF0QixDQUFKLEVBQXFDO0FBQ2pDLHlDQUFLUCxHQUFMLENBQVNVLEtBQVQsQ0FDSSw4Q0FESjtBQUVBQyw0Q0FBUUMsSUFBUixDQUFhLENBQWI7QUFDSDs7QUFFRDtBQUNBO0FBQ0FMLHlDQUFTTSxjQUFULENBQXdCQyxJQUF4QixHQUErQixLQUEvQjtBQUNBUCx5Q0FBU00sY0FBVCxDQUF3QkUsVUFBeEIsR0FBcUMsSUFBckM7O0FBRUlDLG9DLEdBQU8sS0FBS2pCLENBQUwsQ0FBT0csR0FBUCxDQUFXZSxPQUFYLENBQW1CQyxJQUFuQixHQUEwQixNQUExQixHQUFtQyxLOzs7QUFFOUNGLHVDQUFPLEtBQUtqQixDQUFMLENBQU9HLEdBQVAsQ0FBV2UsT0FBWCxDQUFtQkUsUUFBbkIsR0FBOEIsS0FBOUIsR0FBc0NILElBQTdDOztBQUVNSSx1QyxHQUFVLEU7OztBQUVoQixvQ0FBSSxLQUFLckIsQ0FBTCxDQUFPRyxHQUFQLENBQVdlLE9BQVgsQ0FBbUJJLEdBQXZCLEVBQTRCO0FBQ3hCRCw0Q0FBUUUsSUFBUixDQUFhLDBCQUFTQyxPQUF0QjtBQUNIO0FBQ0Qsb0NBQUksS0FBS3hCLENBQUwsQ0FBT0csR0FBUCxDQUFXZSxPQUFYLENBQW1CTyxLQUF2QixFQUE4QjtBQUMxQkosNENBQVFFLElBQVIsQ0FBYSwwQkFBU0csS0FBdEI7QUFDSDtBQUNELG9DQUFJLEtBQUsxQixDQUFMLENBQU9HLEdBQVAsQ0FBV2UsT0FBWCxDQUFtQlMsR0FBdkIsRUFBNEI7QUFDeEJOLDRDQUFRRSxJQUFSLENBQWEsMEJBQVNLLEdBQXRCO0FBQ0g7O0FBRUQsb0NBQUlQLFFBQVFRLE1BQVIsS0FBbUIsQ0FBdkIsRUFBMEI7QUFDdEIsd0NBQUksS0FBSzdCLENBQUwsQ0FBT0csR0FBUCxDQUFXMkIsRUFBWCxDQUFjQyxTQUFsQixFQUE2QjtBQUN6QlYsZ0RBQVFFLElBQVIsQ0FBYSwwQkFBU0MsT0FBdEI7QUFDSCxxQ0FGRCxNQUVPLElBQUksS0FBS3hCLENBQUwsQ0FBT0csR0FBUCxDQUFXMkIsRUFBWCxDQUFjRSxPQUFsQixFQUEyQjtBQUM5QlgsZ0RBQVFFLElBQVIsQ0FBYSwwQkFBU0csS0FBdEI7QUFDSCxxQ0FGTSxNQUVBO0FBQ0hMLGdEQUFRRSxJQUFSLENBQWEsMEJBQVNLLEdBQXRCO0FBQ0g7QUFDSjs7QUFFS0ssc0MsR0FBUyxvQ0FBY1osT0FBZCxFQUF1QixJQUF2QixFQUE2QkosSUFBN0IsQzs7O3VDQUdMLDRCQUFNO0FBQ1JJLDZDQUFTWSxNQUREO0FBRVJDLGlEQUFhO0FBQ1RDLHFEQUFhO0FBQ1RDLGlEQUFLLEtBQUtwQyxDQUFMLENBQU9HLEdBQVAsQ0FBV0MsS0FBWCxDQUFpQkMsV0FBakIsQ0FBNkJnQyxJQUR6QjtBQUVUQyxvREFBUSxlQUFLQyxJQUFMLENBQVUsS0FBS3ZDLENBQUwsQ0FBT0csR0FBUCxDQUFXZSxPQUFYLENBQW1Cb0IsTUFBN0IsRUFBcUMsS0FBS3RDLENBQUwsQ0FBT0csR0FBUCxDQUFXQyxLQUFYLENBQWlCb0MsWUFBdEQ7QUFGQyx5Q0FESjtBQUtUQywrQ0FBT2pDLFNBQVNNO0FBTFA7QUFGTCxpQ0FBTixDOzs7Ozs7Ozs7O0FBV04scUNBQUtiLEdBQUwsQ0FBU1UsS0FBVCxDQUFlLGtDQUFmOzs7OztBQUVBO0FBQ0Esa0RBQU1ULEVBQU4sQ0FDSSxLQUFLRixDQUFMLENBQU9HLEdBQVAsQ0FBV0MsS0FBWCxDQUFpQkMsV0FBakIsQ0FBNkJFLGNBRGpDLEVBRUksS0FBS1AsQ0FBTCxDQUFPRyxHQUFQLENBQVdDLEtBQVgsQ0FBaUJDLFdBQWpCLENBQTZCQyxXQUZqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQTNFU1AsZ0IiLCJmaWxlIjoiaW5zdGFsbGVyQnVpbGRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1aWxkLCBBcmNoLCBQbGF0Zm9ybSwgY3JlYXRlVGFyZ2V0cyB9IGZyb20gJ2VsZWN0cm9uLWJ1aWxkZXInO1xuaW1wb3J0IHNoZWxsIGZyb20gJ3NoZWxsanMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgTG9nIGZyb20gJy4vbG9nJztcblxuLyoqXG4gKiBXcmFwcGVyIGZvciBlbGVjdHJvbi1idWlsZGVyLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnN0YWxsZXJCdWlsZGVyIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TWV0ZW9yRGVza3RvcH0gJCAtIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCQpIHtcbiAgICAgICAgdGhpcy5sb2cgPSBuZXcgTG9nKCdpbnN0YWxsZXJCdWlsZGVyJyk7XG4gICAgICAgIHRoaXMuJCA9ICQ7XG4gICAgfVxuXG4gICAgYXN5bmMgYnVpbGQoKSB7XG4gICAgICAgIC8vIE1vdmUgbm9kZV9tb2R1bGVzIGF3YXkuIFdlIGRvIG5vdCB3YW50IHRvIGRlbGV0ZSBpdCwganVzdCB0ZW1wb3JhcmlseSByZW1vdmUgaXQgZnJvbVxuICAgICAgICAvLyBvdXIgd2F5LlxuICAgICAgICBzaGVsbC5tdihcbiAgICAgICAgICAgIHRoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAubm9kZU1vZHVsZXMsXG4gICAgICAgICAgICB0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLnRtcE5vZGVNb2R1bGVzXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLiQuZGVza3RvcC5nZXRTZXR0aW5ncygpO1xuICAgICAgICBpZiAoISgnYnVpbGRlck9wdGlvbnMnIGluIHNldHRpbmdzKSkge1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoXG4gICAgICAgICAgICAgICAgJ25vIGJ1aWxkZXJPcHRpb25zIGluIHNldHRpbmdzLmpzb24sIGFib3J0aW5nJyk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBhcmUgaGFuZGxpbmcgYXNhcidpbmcgYW5kIHJlYnVpbGRpbmcgaW4gdGhlIG5vcm1hbCBydW4vYnVpbGQgZmxvdyBzbyB3ZSBkbyBub3RcbiAgICAgICAgLy8gd2FudCBlbGVjdHJvbi1yZWJ1aWxkIHRvIGRvIHRoYXQuXG4gICAgICAgIHNldHRpbmdzLmJ1aWxkZXJPcHRpb25zLmFzYXIgPSBmYWxzZTtcbiAgICAgICAgc2V0dGluZ3MuYnVpbGRlck9wdGlvbnMubnBtUmVidWlsZCA9IHRydWU7XG5cbiAgICAgICAgbGV0IGFyY2ggPSB0aGlzLiQuZW52Lm9wdGlvbnMuaWEzMiA/ICdpYTMyJyA6ICd4NjQnO1xuXG4gICAgICAgIGFyY2ggPSB0aGlzLiQuZW52Lm9wdGlvbnMuYWxsQXJjaHMgPyAnYWxsJyA6IGFyY2g7XG5cbiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IFtdO1xuXG4gICAgICAgIGlmICh0aGlzLiQuZW52Lm9wdGlvbnMud2luKSB7XG4gICAgICAgICAgICB0YXJnZXRzLnB1c2goUGxhdGZvcm0uV0lORE9XUyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuJC5lbnYub3B0aW9ucy5saW51eCkge1xuICAgICAgICAgICAgdGFyZ2V0cy5wdXNoKFBsYXRmb3JtLkxJTlVYKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4kLmVudi5vcHRpb25zLm1hYykge1xuICAgICAgICAgICAgdGFyZ2V0cy5wdXNoKFBsYXRmb3JtLk1BQyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLiQuZW52Lm9zLmlzV2luZG93cykge1xuICAgICAgICAgICAgICAgIHRhcmdldHMucHVzaChQbGF0Zm9ybS5XSU5ET1dTKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy4kLmVudi5vcy5pc0xpbnV4KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0cy5wdXNoKFBsYXRmb3JtLkxJTlVYKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0cy5wdXNoKFBsYXRmb3JtLk1BQyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YXJnZXQgPSBjcmVhdGVUYXJnZXRzKHRhcmdldHMsIG51bGwsIGFyY2gpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBidWlsZCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0czogdGFyZ2V0LFxuICAgICAgICAgICAgICAgIGRldk1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdG9yaWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHA6IHRoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAucm9vdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogcGF0aC5qb2luKHRoaXMuJC5lbnYub3B0aW9ucy5vdXRwdXQsIHRoaXMuJC5lbnYucGF0aHMuaW5zdGFsbGVyRGlyKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBidWlsZDogc2V0dGluZ3MuYnVpbGRlck9wdGlvbnNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ2Vycm9yIHdoaWxlIGJ1aWxkaW5nIGluc3RhbGxlcjogJywgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAvLyBNb3ZlIG5vZGVfbW9kdWxlcyBiYWNrLlxuICAgICAgICAgICAgc2hlbGwubXYoXG4gICAgICAgICAgICAgICAgdGhpcy4kLmVudi5wYXRocy5lbGVjdHJvbkFwcC50bXBOb2RlTW9kdWxlcyxcbiAgICAgICAgICAgICAgICB0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLm5vZGVNb2R1bGVzXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=