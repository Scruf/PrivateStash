'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _assignIn = require('lodash/assignIn');

var _assignIn2 = _interopRequireDefault(_assignIn);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _electronPackager = require('electron-packager');

var _electronPackager2 = _interopRequireDefault(_electronPackager);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var join = _path2.default.join;

/**
 * Wrapper around electron-packager.
 * @class
 */

var ElectronPackager = function () {
    function ElectronPackager($) {
        (0, _classCallCheck3.default)(this, ElectronPackager);

        this.log = new _log2.default('electron-packager');
        this.$ = $;
    }

    /**
     * Runs the packager with provided arguments.
     *
     * @param {Object} args
     * @returns {Promise}
     */


    (0, _createClass3.default)(ElectronPackager, [{
        key: 'runPackager',
        value: function runPackager(args) {
            var _this = this;

            return new _promise2.default(function (resolve, reject) {
                (0, _electronPackager2.default)(args, function (err, appPath) {
                    if (err) {
                        reject(err);
                    } else {
                        (function () {
                            _this.log.info('wrote packaged app to ' + _this.$.env.paths.packageDir);

                            var promises = [];
                            appPath.forEach(function (builtAppPath) {
                                var appPathParsed = _path2.default.parse(builtAppPath);
                                promises.push(_this.$.utils.rmWithRetries('-rf', _path2.default.join(_this.$.env.paths.packageDir, appPathParsed.base, 'resources', 'app', 'node_modules')));
                            });
                            _promise2.default.all(promises).then(function () {
                                resolve();
                            }).catch(function (e) {
                                reject(e);
                            });
                        })();
                    }
                });
            });
        }
    }, {
        key: 'packageApp',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
                var _this2 = this;

                var version, settings, name, arch, args;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                version = JSON.parse(_fs2.default.readFileSync(join(this.$.env.paths.meteorApp.root, 'node_modules', 'electron', 'package.json'), 'UTF-8')).version;
                                settings = this.$.desktop.getSettings();
                                name = settings.name;

                                if (!name) {
                                    this.log.error('`name` field in settings.json not set');
                                    process.exit(1);
                                }

                                arch = this.$.env.options.ia32 ? 'ia32' : 'x64';


                                this.log.info('packaging \'' + name + '\' for platform \'' + this.$.env.sys.platform + '-' + arch + '\'' + (' using electron v' + version));

                                _context.prev = 6;
                                _context.next = 9;
                                return this.$.utils.rmWithRetries('-rf', _path2.default.join(this.$.env.options.output, this.$.env.paths.packageDir));

                            case 9:
                                _context.next = 14;
                                break;

                            case 11:
                                _context.prev = 11;
                                _context.t0 = _context['catch'](6);
                                throw new Error(_context.t0);

                            case 14:
                                args = {
                                    name: name,
                                    version: version,
                                    arch: arch,
                                    platform: this.$.env.sys.platform,
                                    dir: this.$.env.paths.electronApp.root,
                                    out: _path2.default.join(this.$.env.options.output, this.$.env.paths.packageDir)
                                };


                                if ('packagerOptions' in settings) {
                                    (function () {
                                        var packagerOptions = settings.packagerOptions;

                                        ['windows', 'linux', 'osx'].forEach(function (system) {
                                            if (_this2.$.env.os['is' + system[0].toUpperCase() + system.substring(1)] && '_' + system in packagerOptions) {
                                                (0, _assignIn2.default)(packagerOptions, packagerOptions['_' + system]);
                                            }
                                        });

                                        if ('version-string' in packagerOptions) {
                                            (0, _keys2.default)(packagerOptions['version-string']).forEach(function (field) {
                                                if (packagerOptions['version-string'][field] === '@version') {
                                                    packagerOptions['version-string'][field] = settings.version;
                                                }
                                            });
                                        }
                                        (0, _assignIn2.default)(args, packagerOptions);
                                    })();
                                }

                                // Move node_modules away. We do not want to delete it, just temporarily remove it from
                                // our way.
                                _shelljs2.default.mv(this.$.env.paths.electronApp.nodeModules, this.$.env.paths.electronApp.tmpNodeModules);

                                _context.prev = 17;
                                _context.next = 20;
                                return this.runPackager(args);

                            case 20:
                                _context.prev = 20;

                                // Move node_modules back.
                                _shelljs2.default.mv(this.$.env.paths.electronApp.tmpNodeModules, this.$.env.paths.electronApp.nodeModules);
                                return _context.finish(20);

                            case 23:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[6, 11], [17,, 20, 23]]);
            }));

            function packageApp() {
                return _ref.apply(this, arguments);
            }

            return packageApp;
        }()
    }]);
    return ElectronPackager;
}();

exports.default = ElectronPackager;
//# sourceMappingURL=data:application/json;base64,