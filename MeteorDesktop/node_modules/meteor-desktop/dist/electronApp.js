'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _sort = require('babel-runtime/core-js/array/sort');

var _sort2 = _interopRequireDefault(_sort);

var _concat = require('babel-runtime/core-js/array/concat');

var _concat2 = _interopRequireDefault(_concat);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _asar = require('asar');

var _asar2 = _interopRequireDefault(_asar);

var _assignIn = require('lodash/assignIn');

var _assignIn2 = _interopRequireDefault(_assignIn);

var _babelCore = require('babel-core');

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _del = require('del');

var _del2 = _interopRequireDefault(_del);

var _babelPresetEs = require('babel-preset-es2015');

var _babelPresetEs2 = _interopRequireDefault(_babelPresetEs);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _babelPresetNode = require('babel-preset-node6');

var _babelPresetNode2 = _interopRequireDefault(_babelPresetNode);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _crossSpawn = require('cross-spawn');

var _crossSpawn2 = _interopRequireDefault(_crossSpawn);

var _uglifyJs = require('uglify-js');

var _uglifyJs2 = _interopRequireDefault(_uglifyJs);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _electronAppScaffold = require('./electronAppScaffold');

var _electronAppScaffold2 = _interopRequireDefault(_electronAppScaffold);

var _dependenciesManager = require('./dependenciesManager');

var _dependenciesManager2 = _interopRequireDefault(_dependenciesManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_shelljs2.default.config.fatal = true;

/**
 * Represents the .desktop dir scaffold.
 * @class
 */

var ElectronApp = function () {

    /**
     * @param {MeteorDesktop} $ - context
     * @constructor
     */
    function ElectronApp($) {
        (0, _classCallCheck3.default)(this, ElectronApp);

        this.log = new _log2.default('electronApp');
        this.scaffold = new _electronAppScaffold2.default($);
        this.depsManager = new _dependenciesManager2.default($, this.scaffold.getDefaultPackageJson().dependencies);
        this.$ = $;
        this.meteorApp = this.$.meteorApp;
        this.packageJson = null;
        this.version = null;
        this.compatibilityVersion = null;
    }

    /**
     * Makes an app.asar from the skeleton app.
     * @property {Array} excludeFromDel - list of paths to exclude from deleting
     * @returns {Promise}
     */


    (0, _createClass3.default)(ElectronApp, [{
        key: 'packSkeletonToAsar',
        value: function packSkeletonToAsar() {
            var _this = this;

            var excludeFromDel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            this.log.info('packing skeleton app and node_modules to asar archive');
            return new _promise2.default(function (resolve) {
                // We want to pack skeleton app and node_modules together, so we need to temporarily
                // move node_modules to app dir.
                _this.log.debug('moving node_modules to app dir');
                _shelljs2.default.mv(_this.$.env.paths.electronApp.nodeModules, _path2.default.join(_this.$.env.paths.electronApp.appRoot, 'node_modules'));
                _this.log.debug('packing');
                _asar2.default.createPackage(_this.$.env.paths.electronApp.appRoot, _this.$.env.paths.electronApp.appAsar, function () {
                    // Lets move the node_modules back.
                    _this.log.debug('moving node_modules back from app dir');
                    _shelljs2.default.mv(_path2.default.join(_this.$.env.paths.electronApp.appRoot, 'node_modules'), _this.$.env.paths.electronApp.nodeModules);
                    _this.log.debug('deleting source files');
                    var exclude = (0, _concat2.default)([_this.$.env.paths.electronApp.nodeModules, _this.$.env.paths.electronApp.appAsar, _this.$.env.paths.electronApp.packageJson], excludeFromDel);

                    _del2.default.sync((0, _concat2.default)(['' + _this.$.env.paths.electronApp.root + _path2.default.sep + '*'], exclude.map(function (pathToExclude) {
                        return '!' + pathToExclude;
                    })));
                    resolve();
                });
            });
        }

        /**
         * Calculates a md5 from all dependencies.
         */

    }, {
        key: 'calculateCompatibilityVersion',
        value: function calculateCompatibilityVersion() {
            var _this2 = this;

            this.log.verbose('calculating compatibility version');
            var md5 = _crypto2.default.createHash('md5');
            var dependencies = (0, _sort2.default)((0, _keys2.default)(this.packageJson.dependencies));
            dependencies = dependencies.map(function (dependency) {
                return dependency + ':' + _this2.packageJson.dependencies[dependency];
            });
            var mainCompatibilityVersion = this.$.getVersion().split('.');
            this.log.debug('meteor-desktop compatibility version is ', mainCompatibilityVersion[0] + '.' + mainCompatibilityVersion[1]);
            dependencies.push('meteor-desktop:' + mainCompatibilityVersion[0] + '.' + mainCompatibilityVersion[1]);

            var desktopCompatibilityVersion = this.$.desktop.getSettings().version.split('.')[0];
            this.log.debug('.desktop compatibility version is ', desktopCompatibilityVersion);
            dependencies.push('desktop-app:' + desktopCompatibilityVersion);

            if (process.env.METEOR_DESKTOP_DEBUG_DESKTOP_COMPATIBILITY_VERSION) {
                this.log.debug('compatibility version calculated from ' + (0, _stringify2.default)(dependencies));
            }

            md5.update((0, _stringify2.default)(dependencies));
            this.compatibilityVersion = md5.digest('hex');
        }

        /**
         * Runs all necessary tasks to build the desktopified app.
         */

    }, {
        key: 'build',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
                var run = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                // TODO: refactor to a task runner
                                this.log.info('scaffolding');

                                if (!this.$.desktop.check()) {
                                    if (!this.$.env.options.scaffold) {
                                        this.log.error('seems that you do not have a .desktop dir in your project or it is' + ' corrupted. Run \'npm run desktop -- init\' to get a new one.');
                                        // Do not fail, so that npm will not print his error stuff to console.
                                        process.exit(0);
                                    } else {
                                        this.$.desktop.scaffold();
                                        this.$.meteorApp.updateGitIgnore();
                                    }
                                }

                                try {
                                    this.$.meteorApp.updateGitIgnore();
                                } catch (e) {
                                    this.log.warn('error occurred while adding ' + this.$.env.paths.electronApp.rootName + 'to .gitignore: ', e);
                                }

                                _context.prev = 3;
                                _context.next = 6;
                                return this.$.meteorApp.ensureDesktopHCPPackages();

                            case 6:
                                _context.next = 12;
                                break;

                            case 8:
                                _context.prev = 8;
                                _context.t0 = _context['catch'](3);

                                this.log.error('error while checking for required packages: ', _context.t0);
                                process.exit(1);

                            case 12:
                                _context.prev = 12;
                                _context.next = 15;
                                return this.scaffold.make();

                            case 15:
                                _context.next = 21;
                                break;

                            case 17:
                                _context.prev = 17;
                                _context.t1 = _context['catch'](12);

                                this.log.error('error while scaffolding: ', _context.t1);
                                process.exit(1);

                            case 21:

                                try {
                                    this.updatePackageJsonFields();
                                } catch (e) {
                                    this.log.error('error while updating package.json: ', e);
                                }

                                try {
                                    this.updateDependenciesList();
                                } catch (e) {
                                    this.log.error('error while merging dependencies list: ', e);
                                }

                                try {
                                    this.calculateCompatibilityVersion();
                                } catch (e) {
                                    this.log.error('error while calculating compatibility version: ', e);
                                    process.exit(1);
                                }

                                _context.prev = 24;
                                _context.next = 27;
                                return this.handleTemporaryNodeModules();

                            case 27:
                                _context.next = 33;
                                break;

                            case 29:
                                _context.prev = 29;
                                _context.t2 = _context['catch'](24);

                                this.log.error('error occurred while handling temporary node_modules: ', _context.t2);
                                process.exit(1);

                            case 33:
                                _context.prev = 33;
                                _context.next = 36;
                                return this.ensureDeps();

                            case 36:
                                _context.next = 42;
                                break;

                            case 38:
                                _context.prev = 38;
                                _context.t3 = _context['catch'](33);

                                this.log.error('error occurred while running npm: ', _context.t3);
                                process.exit(1);

                            case 42:
                                _context.prev = 42;
                                _context.next = 45;
                                return this.ensureMeteorDependencies();

                            case 45:
                                _context.next = 51;
                                break;

                            case 47:
                                _context.prev = 47;
                                _context.t4 = _context['catch'](42);

                                this.log.error('error occurred while running npm: ', _context.t4);
                                process.exit(1);

                            case 51:
                                _context.prev = 51;
                                _context.next = 54;
                                return this.rebuildDeps();

                            case 54:
                                _context.next = 60;
                                break;

                            case 56:
                                _context.prev = 56;
                                _context.t5 = _context['catch'](51);

                                this.log.error('error occurred while rebuilding native node modules: ', _context.t5);
                                process.exit(1);

                            case 60:
                                if (!this.$.env.isProductionBuild()) {
                                    _context.next = 70;
                                    break;
                                }

                                _context.prev = 61;
                                _context.next = 64;
                                return this.packSkeletonToAsar();

                            case 64:
                                _context.next = 70;
                                break;

                            case 66:
                                _context.prev = 66;
                                _context.t6 = _context['catch'](61);

                                this.log.error('error while packing skeleton to asar: ', _context.t6);
                                process.exit(1);

                            case 70:

                                // TODO: find a way to avoid copying .desktop to a temp location
                                try {
                                    this.copyDesktopToDesktopTemp();
                                } catch (e) {
                                    this.log.error('error while copying .desktop to a temporary location: ', e);
                                    process.exit(1);
                                }

                                try {
                                    this.updateSettingsJsonFields();
                                } catch (e) {
                                    this.log.error('error while updating settings.json: ', e);
                                    process.exit(1);
                                }

                                _context.prev = 72;
                                _context.next = 75;
                                return this.excludeFilesFromArchive();

                            case 75:
                                _context.next = 81;
                                break;

                            case 77:
                                _context.prev = 77;
                                _context.t7 = _context['catch'](72);

                                this.log.error('error while excluding files from packing to asar: ', _context.t7);
                                process.exit(1);

                            case 81:

                                try {
                                    this.transpileAndMinify();
                                } catch (e) {
                                    this.log.error('error while transpiling or minifying: ', e);
                                }

                                _context.prev = 82;
                                _context.next = 85;
                                return this.packDesktopToAsar();

                            case 85:
                                _context.next = 91;
                                break;

                            case 87:
                                _context.prev = 87;
                                _context.t8 = _context['catch'](82);

                                this.log.error('error occurred while packing .desktop to asar: ', _context.t8);
                                process.exit(1);

                            case 91:
                                _context.prev = 91;
                                _context.next = 94;
                                return this.getMeteorClientBuild();

                            case 94:
                                _context.next = 99;
                                break;

                            case 96:
                                _context.prev = 96;
                                _context.t9 = _context['catch'](91);

                                this.log.error('error occurred during getting meteor mobile build: ', _context.t9);

                            case 99:

                                if (run) {
                                    this.log.info('running');
                                    this.$.electron.run();
                                } else {
                                    this.log.info('built');
                                }

                            case 100:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[3, 8], [12, 17], [24, 29], [33, 38], [42, 47], [51, 56], [61, 66], [72, 77], [82, 87], [91, 96]]);
            }));

            function build() {
                return _ref.apply(this, arguments);
            }

            return build;
        }()
    }, {
        key: 'ensureMeteorDependencies',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
                var _this3 = this;

                var packages, packagesWithVersion, plugins;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                packages = [];
                                packagesWithVersion = [];
                                plugins = 'plugins [';


                                (0, _keys2.default)(this.$.desktop.getDependencies().plugins).forEach(function (plugin) {
                                    // Read package.json of the plugin.
                                    var packageJson = JSON.parse(_fs2.default.readFileSync(_path2.default.join(_this3.$.env.paths.electronApp.nodeModules, plugin, 'package.json'), 'utf8'));

                                    if ('meteorDependencies' in packageJson && (0, _typeof3.default)(packageJson.meteorDependencies) === 'object') {
                                        plugins += plugin + ', ';
                                        packages.unshift.apply(packages, (0, _toConsumableArray3.default)((0, _keys2.default)(packageJson.meteorDependencies)));
                                        packagesWithVersion.unshift.apply(packagesWithVersion, (0, _toConsumableArray3.default)(packages.map(function (packageName) {
                                            if (packageJson.meteorDependencies[packageName] === '@version') {
                                                return packageName + '@' + packageJson.version;
                                            }
                                            return packageName + '@' + packageJson.meteorDependencies[packageName];
                                        })));
                                    }
                                });

                                if (!(packages.length > 0)) {
                                    _context2.next = 14;
                                    break;
                                }

                                plugins = plugins.substr(0, plugins.length - 2) + ']';
                                _context2.prev = 6;
                                _context2.next = 9;
                                return this.$.meteorApp.ensurePackages(packages, packagesWithVersion, plugins);

                            case 9:
                                _context2.next = 14;
                                break;

                            case 11:
                                _context2.prev = 11;
                                _context2.t0 = _context2['catch'](6);
                                throw new Error(_context2.t0);

                            case 14:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[6, 11]]);
            }));

            function ensureMeteorDependencies() {
                return _ref2.apply(this, arguments);
            }

            return ensureMeteorDependencies;
        }()

        /**
         * Builds meteor app.
         */

    }, {
        key: 'getMeteorClientBuild',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return this.$.meteorApp.build();

                            case 2:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getMeteorClientBuild() {
                return _ref3.apply(this, arguments);
            }

            return getMeteorClientBuild;
        }()
    }, {
        key: 'handleTemporaryNodeModules',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (!this.$.utils.exists(this.$.env.paths.electronApp.tmpNodeModules)) {
                                    _context4.next = 15;
                                    break;
                                }

                                if (this.$.utils.exists(this.$.env.paths.electronApp.nodeModules)) {
                                    _context4.next = 6;
                                    break;
                                }

                                this.log.debug('moving temp node_modules back');
                                _shelljs2.default.mv(this.$.env.paths.electronApp.tmpNodeModules, this.$.env.paths.electronApp.nodeModules);
                                _context4.next = 15;
                                break;

                            case 6:
                                // If there is a node_modules folder, we should clear the temporary one.
                                this.log.debug('clearing temp node_modules because new one is already created');
                                _context4.prev = 7;
                                _context4.next = 10;
                                return this.$.utils.rmWithRetries('-rf', this.$.env.paths.electronApp.tmpNodeModules);

                            case 10:
                                _context4.next = 15;
                                break;

                            case 12:
                                _context4.prev = 12;
                                _context4.t0 = _context4['catch'](7);
                                throw new Error(_context4.t0);

                            case 15:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this, [[7, 12]]);
            }));

            function handleTemporaryNodeModules() {
                return _ref4.apply(this, arguments);
            }

            return handleTemporaryNodeModules;
        }()

        /**
         * Wrapper for spawning npm.
         * @param {Array}  commands - commands for spawn
         * @param {string} stdio
         * @return {Promise}
         */

    }, {
        key: 'runNpm',
        value: function runNpm(commands) {
            var _this4 = this;

            var stdio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ignore';

            return new _promise2.default(function (resolve, reject) {
                // TODO: find a way to run npm without depending on it cause it's a huge dependency.
                var npm = _path2.default.join(_this4.$.env.paths.meteorApp.root, 'node_modules', '.bin', 'npm');
                _this4.log.verbose('executing npm ' + commands.join(' '));

                (0, _crossSpawn2.default)(npm, commands, {
                    cwd: _this4.$.env.paths.electronApp.root,
                    stdio: stdio
                }).on('exit', function (code) {
                    return code === 0 ? resolve() : reject('npm exit code was ' + code);
                });
            });
        }

        /**
         * Runs npm link for every package specified in settings.json->linkPackages.
         */

    }, {
        key: 'linkNpmPackages',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
                var _this5 = this;

                var settings, promises;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                settings = this.$.desktop.getSettings();
                                promises = [];

                                if ('linkPackages' in this.$.desktop.getSettings()) {
                                    if (Array.isArray(settings.linkPackages)) {
                                        settings.linkPackages.forEach(function (packageName) {
                                            return promises.push(_this5.runNpm(['link', packageName]));
                                        });
                                    }
                                }
                                _context5.next = 5;
                                return _promise2.default.all(promises);

                            case 5:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function linkNpmPackages() {
                return _ref5.apply(this, arguments);
            }

            return linkNpmPackages;
        }()

        /**
         * Runs npm in the electron app to get the dependencies installed.
         * @returns {Promise}
         */

    }, {
        key: 'ensureDeps',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.next = 2;
                                return this.linkNpmPackages();

                            case 2:

                                this.log.info('installing dependencies');

                                if (!this.$.utils.exists(this.$.env.paths.electronApp.nodeModules)) {
                                    _context6.next = 13;
                                    break;
                                }

                                this.log.debug('running npm prune to wipe unneeded dependencies');
                                _context6.prev = 5;
                                _context6.next = 8;
                                return this.runNpm(['prune']);

                            case 8:
                                _context6.next = 13;
                                break;

                            case 10:
                                _context6.prev = 10;
                                _context6.t0 = _context6['catch'](5);
                                throw new Error(_context6.t0);

                            case 13:
                                _context6.prev = 13;
                                _context6.next = 16;
                                return this.runNpm(['install'], this.$.env.stdio);

                            case 16:
                                _context6.next = 21;
                                break;

                            case 18:
                                _context6.prev = 18;
                                _context6.t1 = _context6['catch'](13);
                                throw new Error(_context6.t1);

                            case 21:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this, [[5, 10], [13, 18]]);
            }));

            function ensureDeps() {
                return _ref6.apply(this, arguments);
            }

            return ensureDeps;
        }()

        /**
         * Warns if plugins version are outdated in compare to the newest scaffold.
         * @param {Object} pluginsVersions - current plugins versions from settings.json
         */

    }, {
        key: 'checkPluginsVersion',
        value: function checkPluginsVersion(pluginsVersions) {
            var _this6 = this;

            var settingsJson = JSON.parse(_fs2.default.readFileSync(_path2.default.join(this.$.env.paths.scaffold, 'settings.json')));
            var scaffoldPluginsVersion = this.$.desktop.getDependencies(settingsJson, false).plugins;
            (0, _keys2.default)(pluginsVersions).forEach(function (pluginName) {
                if (scaffoldPluginsVersion[pluginName] !== pluginsVersions[pluginName]) {
                    _this6.log.warn('you are using outdated version ' + pluginsVersions[pluginName] + ' of ' + (pluginName + ', the suggested version to use is ') + ('' + scaffoldPluginsVersion[pluginName]));
                }
            });
        }

        /**
         * Merges core dependency list with the dependencies from .desktop.
         */

    }, {
        key: 'updateDependenciesList',
        value: function updateDependenciesList() {
            var _this7 = this;

            this.log.info('updating list of package.json\'s dependencies');
            var desktopDependencies = this.$.desktop.getDependencies();

            this.checkPluginsVersion(desktopDependencies.plugins);

            this.log.debug('merging settings.json[dependencies]');
            this.depsManager.mergeDependencies('settings.json[dependencies]', desktopDependencies.fromSettings);
            this.log.debug('merging settings.json[plugins]');
            this.depsManager.mergeDependencies('settings.json[plugins]', desktopDependencies.plugins);

            this.log.debug('merging dependencies from modules');
            (0, _keys2.default)(desktopDependencies.modules).forEach(function (module) {
                return _this7.depsManager.mergeDependencies('module[' + module + ']', desktopDependencies.modules[module]);
            });

            this.packageJson.dependencies = this.depsManager.getDependencies();

            this.log.debug('writing updated package.json');
            _fs2.default.writeFileSync(this.$.env.paths.electronApp.packageJson, (0, _stringify2.default)(this.packageJson, null, 2));
        }

        /**
         * Rebuild binary dependencies against Electron's node headers.
         * @returns {Promise}
         */

    }, {
        key: 'rebuildDeps',
        value: function rebuildDeps() {
            if (!this.$.desktop.getSettings().rebuildNativeNodeModules) {
                this.log.warn('native modules rebuild is turned off, be sure to turn it on if you' + ' added any native node ' + 'modules');
                return _promise2.default.resolve();
            }

            this.log.info('issuing native modules rebuild from electron-builder');

            return this.$.electronBuilder.installOrRebuild('x64');
        }

        /**
         * Update package.json fields accordingly to what is set in settings.json.
         *
         * packageJson.name = settings.projectName
         * packageJson.version = settings.version
         * packageJson.* = settings.packageJsonFields
         */

    }, {
        key: 'updatePackageJsonFields',
        value: function updatePackageJsonFields() {
            this.log.verbose('updating package.json fields');
            var settings = this.$.desktop.getSettings();
            /** @type {desktopSettings} */
            var packageJson = this.scaffold.getDefaultPackageJson();

            packageJson.version = settings.version;
            if ('packageJsonFields' in settings) {
                (0, _assignIn2.default)(packageJson, settings.packageJsonFields);
            }
            (0, _assignIn2.default)(packageJson, { name: settings.projectName });

            this.log.debug('writing updated package.json');
            _fs2.default.writeFileSync(this.$.env.paths.electronApp.packageJson, (0, _stringify2.default)(packageJson, null, 4));
            this.packageJson = packageJson;
        }

        /**
         * Updates settings.json with env (prod/dev) information and versions.
         */

    }, {
        key: 'updateSettingsJsonFields',
        value: function updateSettingsJsonFields() {
            this.log.debug('updating settings.json fields');
            var settings = this.$.desktop.getSettings();

            // Save versions.
            settings.desktopVersion = this.$.desktop.getHashVersion();
            settings.compatibilityVersion = this.compatibilityVersion;

            // Pass information about build type to the settings.json.
            settings.env = this.$.env.isProductionBuild() ? 'prod' : 'dev';

            settings.meteorDesktopVersion = this.$.getVersion();

            _fs2.default.writeFileSync(this.$.env.paths.desktopTmp.settings, (0, _stringify2.default)(settings, null, 4));
        }

        /**
         * Copies files from prepared .desktop to desktop.asar in electron app.
         */

    }, {
        key: 'packDesktopToAsar',
        value: function packDesktopToAsar() {
            var _this8 = this;

            this.log.info('packing .desktop to asar');
            return new _promise2.default(function (resolve, reject) {
                _asar2.default.createPackage(_this8.$.env.paths.desktopTmp.root, _this8.$.env.paths.electronApp.desktopAsar, function () {
                    _this8.log.verbose('clearing temporary .desktop');
                    _this8.$.utils.rmWithRetries('-rf', _this8.$.env.paths.desktopTmp.root).then(function () {
                        resolve();
                    }).catch(function (e) {
                        reject(e);
                    });
                });
            });
        }

        /**
         * Makes a temporary copy of .desktop.
         */

    }, {
        key: 'copyDesktopToDesktopTemp',
        value: function copyDesktopToDesktopTemp() {
            this.log.verbose('copying .desktop to temporary location');
            _shelljs2.default.cp('-rf', this.$.env.paths.desktop.root, this.$.env.paths.desktopTmp.root);
            // Remove test files.
            _del2.default.sync([_path2.default.join(this.$.env.paths.desktopTmp.root, '**', '*.test.js')]);
        }

        /**
         * Runs babel and uglify over .desktop if requested.
         */

    }, {
        key: 'transpileAndMinify',
        value: function transpileAndMinify() {
            this.log.info('transpiling and uglifying');

            var settings = this.$.desktop.getSettings();
            var options = 'uglifyOptions' in settings ? settings.uglifyOptions : {};
            options.fromString = true;
            var uglifyingEnabled = 'uglify' in settings && !!settings.uglify;

            // Unfortunately `reify` will not work when we require a .js file from an asar archive.
            // So here we will transpile .desktop to have the ES6 modules working.

            // Uglify does not handle ES6 yet, so we will have to transpile to ES5 for now.
            var preset = uglifyingEnabled && settings.env === 'prod' ? _babelPresetEs2.default : _babelPresetNode2.default;

            _glob2.default.sync(this.$.env.paths.desktopTmp.root + '/**/*.js').forEach(function (file) {
                var _transformFileSync = (0, _babelCore.transformFileSync)(file, {
                    presets: [preset]
                }),
                    code = _transformFileSync.code;

                if (settings.env === 'prod' && uglifyingEnabled) {
                    code = _uglifyJs2.default.minify(code, options).code;
                }
                _fs2.default.writeFileSync(file, code);
            });
        }

        /**
         * Moves all the files that should not be packed into asar into a safe location which is the
         * 'extracted' dir in the electron app.
         */

    }, {
        key: 'excludeFilesFromArchive',
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
                var _this9 = this;

                var configs;
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                this.log.info('excluding files from packing');

                                // Ensure empty `extracted` dir

                                _context7.prev = 1;
                                _context7.next = 4;
                                return this.$.utils.rmWithRetries('-rf', this.$.env.paths.electronApp.extracted);

                            case 4:
                                _context7.next = 9;
                                break;

                            case 6:
                                _context7.prev = 6;
                                _context7.t0 = _context7['catch'](1);
                                throw new Error(_context7.t0);

                            case 9:

                                _shelljs2.default.mkdir(this.$.env.paths.electronApp.extracted);

                                configs = this.$.desktop.gatherModuleConfigs();

                                // Move files that should not be asar'ed.

                                configs.forEach(function (config) {
                                    var moduleConfig = config;
                                    if ('extract' in moduleConfig) {
                                        if (!Array.isArray(moduleConfig.extract)) {
                                            moduleConfig.extract = [moduleConfig.extract];
                                        }
                                        moduleConfig.extract.forEach(function (file) {
                                            _this9.log.debug('excluding ' + file + ' from ' + config.name);
                                            var filePath = _path2.default.join(_this9.$.env.paths.desktopTmp.modules, moduleConfig.dirName, file);
                                            var destinationPath = _path2.default.join(_this9.$.env.paths.electronApp.extracted, moduleConfig.dirName);

                                            if (!_this9.$.utils.exists(destinationPath)) {
                                                _shelljs2.default.mkdir(destinationPath);
                                            }
                                            _shelljs2.default.mv(filePath, destinationPath);
                                        });
                                    }
                                });

                            case 12:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this, [[1, 6]]);
            }));

            function excludeFilesFromArchive() {
                return _ref7.apply(this, arguments);
            }

            return excludeFilesFromArchive;
        }()
    }]);
    return ElectronApp;
}();

exports.default = ElectronApp;
//# sourceMappingURL=data:application/json;base64,