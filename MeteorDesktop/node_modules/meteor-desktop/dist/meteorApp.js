'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _setImmediate2 = require('babel-runtime/core-js/set-immediate');

var _setImmediate3 = _interopRequireDefault(_setImmediate2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _crossSpawn = require('cross-spawn');

var _crossSpawn2 = _interopRequireDefault(_crossSpawn);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _singleLineLog = require('single-line-log');

var _singleLineLog2 = _interopRequireDefault(_singleLineLog);

var _asar = require('asar');

var _asar2 = _interopRequireDefault(_asar);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _isDesktopInjector = require('../skeleton/modules/autoupdate/isDesktopInjector');

var _isDesktopInjector2 = _interopRequireDefault(_isDesktopInjector);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var join = _path2.default.join;

var sll = _singleLineLog2.default.stdout;

// TODO: refactor all strategy ifs to one place

/**
 * Represents the Meteor app.
 * @property {MeteorDesktop} $
 * @class
 */

var MeteorApp = function () {

    /**
     * @param {MeteorDesktop} $ - context
     * @constructor
     */
    function MeteorApp($) {
        (0, _classCallCheck3.default)(this, MeteorApp);

        this.log = new _log2.default('meteorApp');
        this.$ = $;
        this.mobilePlatform = null;
        this.oldManifest = null;
        this.injector = new _isDesktopInjector2.default();
        this.matcher = new RegExp('__meteor_runtime_config__ = JSON.parse\\(decodeURIComponent\\("([^"]*)"\\)\\)');
        this.replacer = new RegExp('(__meteor_runtime_config__ = JSON.parse\\(decodeURIComponent\\()"([^"]*)"(\\)\\))');
        this.meteorVersion = null;
        this.indexHTMLstrategy = null;

        this.indexHTMLStrategies = {
            INDEX_FROM_CORDOVA_BUILD: 1,
            INDEX_FROM_RUNNING_SERVER: 2
        };
    }

    /**
     * Looks for specified packages in .meteor/packages. In other words checks if the project has
     * specified packages added.
     * @param {Array} packages
     * @returns {boolean}
     */


    (0, _createClass3.default)(MeteorApp, [{
        key: 'checkPackages',
        value: function checkPackages(packages) {
            var usedPackages = _fs2.default.readFileSync(this.$.env.paths.meteorApp.packages, 'UTF-8').split('\n');
            return !packages.some(function (packageToFind) {
                return !usedPackages.some(function (meteorPackage) {
                    return ~meteorPackage.indexOf(packageToFind);
                });
            });
        }

        /**
         * Looks for specified packages in .meteor/packages. In other words checks if the project has
         * specified packages added.
         * @param {Array} packages
         * @returns {boolean}
         */

    }, {
        key: 'checkPackagesVersion',
        value: function checkPackagesVersion(packages) {
            var usedPackages = _fs2.default.readFileSync(this.$.env.paths.meteorApp.versions, 'UTF-8').split('\n');
            return !packages.some(function (packageToFind) {
                return !usedPackages.some(function (meteorPackage) {
                    return meteorPackage === packageToFind;
                });
            });
        }
    }, {
        key: 'ensurePackages',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(packages, packagesWithVersion, who) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (this.checkPackages(packages)) {
                                    _context.next = 10;
                                    break;
                                }

                                this.log.warn(who + ' requires some packages that are not added to project, will try to add them now');
                                _context.prev = 2;
                                _context.next = 5;
                                return this.addPackages(packages, packagesWithVersion);

                            case 5:
                                _context.next = 10;
                                break;

                            case 7:
                                _context.prev = 7;
                                _context.t0 = _context['catch'](2);
                                throw new Error(_context.t0);

                            case 10:
                                if (this.checkPackagesVersion(packagesWithVersion)) {
                                    _context.next = 20;
                                    break;
                                }

                                this.log.warn(who + ' required packages version is different, fixing it');
                                _context.prev = 12;
                                _context.next = 15;
                                return this.addPackages(packages, packagesWithVersion);

                            case 15:
                                _context.next = 20;
                                break;

                            case 17:
                                _context.prev = 17;
                                _context.t1 = _context['catch'](12);
                                throw new Error(_context.t1);

                            case 20:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[2, 7], [12, 17]]);
            }));

            function ensurePackages(_x, _x2, _x3) {
                return _ref.apply(this, arguments);
            }

            return ensurePackages;
        }()

        /**
         * Ensures that required packages are added to the Meteor app.
         */

    }, {
        key: 'ensureDesktopHCPPackages',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
                var _this = this;

                var packages, packagesWithVersion;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (!this.$.desktop.getSettings().desktopHCP) {
                                    _context2.next = 14;
                                    break;
                                }

                                this.log.verbose('desktopHCP is enabled, checking for required packages');

                                packages = ['omega:meteor-desktop-watcher', 'omega:meteor-desktop-bundler'];
                                packagesWithVersion = packages.map(function (packageName) {
                                    return packageName + '@' + _this.$.getVersion();
                                });
                                _context2.prev = 4;
                                _context2.next = 7;
                                return this.ensurePackages(packages, packagesWithVersion, 'desktopHCP');

                            case 7:
                                _context2.next = 12;
                                break;

                            case 9:
                                _context2.prev = 9;
                                _context2.t0 = _context2['catch'](4);
                                throw new Error(_context2.t0);

                            case 12:
                                _context2.next = 15;
                                break;

                            case 14:
                                this.log.verbose('desktopHCP is not enabled, skipping checking for required packages');

                            case 15:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[4, 9]]);
            }));

            function ensureDesktopHCPPackages() {
                return _ref2.apply(this, arguments);
            }

            return ensureDesktopHCPPackages;
        }()

        /**
         * Adds packages to the meteor app.
         * @param {Array} packages            - array with names of the packages to add
         * @param {Array} packagesWithVersion - array with names and versions of the packages to add
         */

    }, {
        key: 'addPackages',
        value: function addPackages(packages, packagesWithVersion) {
            var _this2 = this;

            this.log.info('adding packages to meteor project', packagesWithVersion);
            return new _promise2.default(function (resolve, reject) {
                (0, _crossSpawn2.default)('meteor', ['add'].concat(packagesWithVersion.map(function (packageName) {
                    return packageName.replace('@', '@=');
                })), {
                    cwd: _this2.$.env.paths.meteorApp.root,
                    stdio: ['pipe', 'pipe', process.stderr],
                    env: (0, _assign2.default)({ METEOR_PRETTY_OUTPUT: 0, METEOR_NO_RELEASE_CHECK: 1 }, process.env)
                }).on('exit', function (code) {
                    if (code !== 0 || !_this2.checkPackages(packages)) {
                        reject('adding packages failed');
                    } else {
                        resolve();
                    }
                });
            });
        }

        /**
         * Adds entry to .meteor/.gitignore if necessary.
         */

    }, {
        key: 'updateGitIgnore',
        value: function updateGitIgnore() {
            this.log.verbose('updating .meteor/.gitignore');
            // Lets read the .meteor/.gitignore and filter out blank lines.
            var gitIgnore = _fs2.default.readFileSync(this.$.env.paths.meteorApp.gitIgnore, 'UTF-8').split('\n').filter(function (ignoredPath) {
                return ignoredPath.trim() !== '';
            });

            if (!~gitIgnore.indexOf(this.$.env.paths.electronApp.rootName)) {
                this.log.verbose('adding ' + this.$.env.paths.electronApp.rootName + ' to .meteor/.gitignore');
                gitIgnore.push(this.$.env.paths.electronApp.rootName);

                _fs2.default.writeFileSync(this.$.env.paths.meteorApp.gitIgnore, gitIgnore.join('\n'), 'UTF-8');
            }
        }

        /**
         * Reads the Meteor release version used in the app.
         * @returns {string}
         */

    }, {
        key: 'getMeteorRelease',
        value: function getMeteorRelease() {
            var release = _fs2.default.readFileSync(this.$.env.paths.meteorApp.release, 'UTF-8').split('\n')[0];
            release = release.split('@')[1];
            // We do not care if it is beta.
            if (~release.indexOf('-')) {
                release = release.split('-')[0];
            }
            return release;
        }

        /**
         * Validate meteor version against a versionRange.
         * @param {string} versionRange - semver version range
         */

    }, {
        key: 'checkMeteorVersion',
        value: function checkMeteorVersion(versionRange) {
            var release = this.getMeteorRelease();
            release = release.match(/(^\d+\.\d+\.\d+)/gmi)[0];
            if (!_semver2.default.satisfies(release, versionRange)) {
                if (this.$.env.options.skipMobileBuild) {
                    this.log.error('wrong meteor version (' + release + ') in project - only ' + (versionRange + ' is supported'));
                } else {
                    this.log.error('wrong meteor version (' + release + ') in project - only ' + (versionRange + ' is supported for automatic meteor builds (you can always ') + 'try with `--skip-mobile-build` if you are using meteor >= 1.2.1');
                }
                process.exit(1);
            }
        }
    }, {
        key: 'chooseStrategy',
        value: function chooseStrategy() {
            if (this.$.env.options.forceCordovaBuild) {
                return this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD;
            }

            var release = this.getMeteorRelease().match(/(^\d+\.\d+\.\d+)/gmi)[0];
            if (_semver2.default.satisfies(release, '> 1.3.4')) {
                return this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER;
            }
            if (_semver2.default.satisfies(release, '1.3.4')) {
                var explodedVersion = this.getMeteorRelease().split('.');
                if (explodedVersion.length >= 4) {
                    if (explodedVersion[3] > 1) {
                        return this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER;
                    }
                    return this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD;
                }
            }
            return this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD;
        }

        /**
         * Checks required preconditions.
         * - Meteor version
         * - is mobile platform added
         */

    }, {
        key: 'checkPreconditions',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
                var platforms;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (this.$.env.options.skipMobileBuild) {
                                    this.checkMeteorVersion('>= 1.2.1');
                                } else {
                                    this.checkMeteorVersion('>= 1.3.3');
                                    this.indexHTMLstrategy = this.chooseStrategy();
                                    if (this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD) {
                                        this.log.debug('meteor version is < 1.3.4.2 so the index.html from cordova-build will' + ' be used');
                                    } else {
                                        this.log.debug('meteor version is >= 1.3.4.2 so the index.html will be downloaded ' + 'from __cordova/index.html');
                                    }
                                }

                                if (this.$.env.options.skipMobileBuild) {
                                    _context3.next = 15;
                                    break;
                                }

                                platforms = _fs2.default.readFileSync(this.$.env.paths.meteorApp.platforms, 'UTF-8');

                                if (!(!~platforms.indexOf('android') && !~platforms.indexOf('ios'))) {
                                    _context3.next = 15;
                                    break;
                                }

                                if (!this.$.env.options.android) {
                                    this.mobilePlatform = 'ios';
                                } else {
                                    this.mobilePlatform = 'android';
                                }
                                this.log.warn('no mobile target detected - will add \'' + this.mobilePlatform + '\' ' + 'just to get a mobile build');
                                _context3.prev = 6;
                                _context3.next = 9;
                                return this.addMobilePlatform(this.mobilePlatform);

                            case 9:
                                _context3.next = 15;
                                break;

                            case 11:
                                _context3.prev = 11;
                                _context3.t0 = _context3['catch'](6);

                                this.log.error('failed to add a mobile platform - please try to do it manually');
                                process.exit(1);

                            case 15:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[6, 11]]);
            }));

            function checkPreconditions() {
                return _ref3.apply(this, arguments);
            }

            return checkPreconditions;
        }()

        /**
         * Tries to add a mobile platform to meteor project.
         * @param {string} platform - platform to add
         * @returns {Promise}
         */

    }, {
        key: 'addMobilePlatform',
        value: function addMobilePlatform(platform) {
            var _this3 = this;

            return new _promise2.default(function (resolve, reject) {
                _this3.log.verbose('adding mobile platform: ' + platform);
                (0, _crossSpawn2.default)('meteor', ['add-platform', platform], {
                    cwd: _this3.$.env.paths.meteorApp.root,
                    stdio: _this3.$.env.stdio
                }).on('exit', function () {
                    var platforms = _fs2.default.readFileSync(_this3.$.env.paths.meteorApp.platforms, 'UTF-8');
                    if (!~platforms.indexOf('android') && !~platforms.indexOf('ios')) {
                        reject();
                    } else {
                        resolve();
                    }
                });
            });
        }

        /**
         * Tries to remove a mobile platform from meteor project.
         * @param {string} platform - platform to remove
         * @returns {Promise}
         */

    }, {
        key: 'removeMobilePlatform',
        value: function removeMobilePlatform(platform) {
            var _this4 = this;

            return new _promise2.default(function (resolve, reject) {
                _this4.log.verbose('removing mobile platform: ' + platform);
                (0, _crossSpawn2.default)('meteor', ['remove-platform', platform], {
                    cwd: _this4.$.env.paths.meteorApp.root,
                    stdio: _this4.$.env.stdio,
                    env: (0, _assign2.default)({ METEOR_PRETTY_OUTPUT: 0 }, process.env)
                }).on('exit', function () {
                    var platforms = _fs2.default.readFileSync(_this4.$.env.paths.meteorApp.platforms, 'UTF-8');
                    if (~platforms.indexOf(platform)) {
                        reject();
                    } else {
                        resolve();
                    }
                });
            });
        }

        /**
         * Just checks for index.html and program.json existence.
         * @returns {boolean}
         */

    }, {
        key: 'isCordovaBuildReady',
        value: function isCordovaBuildReady() {
            if (this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD) {
                return this.$.utils.exists(this.$.env.paths.meteorApp.cordovaBuildIndex) && this.$.utils.exists(this.$.env.paths.meteorApp.cordovaBuildProgramJson) && (!this.oldManifest || this.oldManifest && this.oldManifest !== _fs2.default.readFileSync(this.$.env.paths.meteorApp.cordovaBuildProgramJson, 'UTF-8'));
            }
            return this.$.utils.exists(this.$.env.paths.meteorApp.webCordovaProgramJson) && (!this.oldManifest || this.oldManifest && this.oldManifest !== _fs2.default.readFileSync(this.$.env.paths.meteorApp.webCordovaProgramJson, 'UTF-8'));
        }
    }, {
        key: 'acquireIndex',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
                var port, res, text;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                port = this.$.env.options.port ? this.$.env.options.port : 3080;

                                this.log.info('acquiring index.html');
                                _context4.next = 4;
                                return (0, _nodeFetch2.default)('http://127.0.0.1:' + port + '/__cordova/index.html');

                            case 4:
                                res = _context4.sent;
                                _context4.next = 7;
                                return res.text();

                            case 7:
                                text = _context4.sent;

                                if (!~text.indexOf('src="/cordova.js"')) {
                                    _context4.next = 10;
                                    break;
                                }

                                return _context4.abrupt('return', text);

                            case 10:
                                return _context4.abrupt('return', false);

                            case 11:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function acquireIndex() {
                return _ref4.apply(this, arguments);
            }

            return acquireIndex;
        }()
    }, {
        key: 'acquireManifest',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
                var port, res, text;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                port = this.$.env.options.port ? this.$.env.options.port : 3080;

                                this.log.info('acquiring manifest.json');
                                _context5.next = 4;
                                return (0, _nodeFetch2.default)('http://127.0.0.1:' + port + '/__cordova/manifest.json?meteor_dont_serve_index=true');

                            case 4:
                                res = _context5.sent;
                                _context5.next = 7;
                                return res.text();

                            case 7:
                                text = _context5.sent;
                                return _context5.abrupt('return', JSON.parse(text));

                            case 9:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function acquireManifest() {
                return _ref5.apply(this, arguments);
            }

            return acquireManifest;
        }()

        /**
         * Tries to get a mobile build from meteor app.
         * In case of failure leaves a meteor.log.
         * A lot of stuff is happening here - but the main aim is to get a mobile build from
         * .meteor/local/cordova-build/www/application and exit as soon as possible.
         *
         * @returns {Promise}
         */

    }, {
        key: 'buildMobileTarget',
        value: function buildMobileTarget() {
            var _this5 = this;

            var programJson = this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD ? this.$.env.paths.meteorApp.cordovaBuildProgramJson : this.$.env.paths.meteorApp.webCordovaProgramJson;

            if (this.$.utils.exists(programJson)) {
                this.oldManifest = _fs2.default.readFileSync(programJson, 'UTF-8');
            }

            return new _promise2.default(function (resolve, reject) {
                var self = _this5;
                var log = '';
                var desiredExit = false;
                var buildTimeout = null;
                var errorTimeout = null;
                var messageTimeout = null;
                var killTimeout = null;
                var cordovaCheckInterval = null;
                var portProblem = false;

                function windowsKill(pid) {
                    self.log.debug('killing pid: ' + pid);
                    _crossSpawn2.default.sync('taskkill', ['/pid', pid, '/f', '/t']);

                    // We will look for other process which might have been created outside the
                    // process tree.
                    // Lets list all node.exe processes.
                    var out = _crossSpawn2.default.sync('wmic', ['process', 'where', 'caption="node.exe"', 'get', 'commandline,processid']).stdout.toString('utf-8').split('\n');
                    var args = self.prepareArguments();
                    // Lets mount regex.
                    var regexV1 = new RegExp(args.join('\\s+') + '\\s+(\\d+)', 'gm');
                    var regexV2 = new RegExp('"' + args.join('"\\s+"') + '"\\s+(\\d+)', 'gm');
                    // No we will check for those with the matching params.
                    out.forEach(function (line) {
                        var match = regexV1.exec(line) || regexV2.exec(line) || false;
                        if (match) {
                            self.log.debug('killing pid: ' + match[1]);
                            _crossSpawn2.default.sync('taskkill', ['/pid', match[1], '/f', '/t']);
                        }
                    });
                }

                function writeLog() {
                    _fs2.default.writeFileSync('meteor.log', log, 'UTF-8');
                }

                function clearTimeoutsAndIntervals() {
                    clearInterval(cordovaCheckInterval);
                    clearTimeout(buildTimeout);
                    clearTimeout(errorTimeout);
                    clearTimeout(messageTimeout);
                    clearTimeout(killTimeout);
                }

                var args = _this5.prepareArguments();

                _this5.log.info('running "meteor ' + args.join(' ') + '"... this might take a while');

                // Lets spawn meteor.
                var child = (0, _crossSpawn2.default)('meteor', args, {
                    env: (0, _assign2.default)({ METEOR_PRETTY_OUTPUT: 0, METEOR_NO_RELEASE_CHECK: 1 }, process.env),
                    cwd: _this5.$.env.paths.meteorApp.root
                }, { shell: true });

                // Kills the currently running meteor command.
                function kill() {
                    sll('');
                    child.kill('SIGKILL');
                    if (self.$.env.os.isWindows) {
                        windowsKill(child.pid);
                    }
                }

                function exit() {
                    killTimeout = setTimeout(function () {
                        clearTimeoutsAndIntervals();
                        desiredExit = true;
                        kill();
                        resolve();
                    }, 500);
                }

                function copyBuild() {
                    self.copyBuild().then(function () {
                        exit();
                    }).catch(function () {
                        clearTimeoutsAndIntervals();
                        kill();
                        writeLog();
                        reject('copy');
                    });
                }

                cordovaCheckInterval = setInterval(function () {
                    // Check if we already have cordova-build ready.
                    if (_this5.isCordovaBuildReady()) {
                        // If so, then exit immediately.
                        if (_this5.indexHTMLstrategy === _this5.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD) {
                            copyBuild();
                        }
                    }
                }, 1000);

                child.stderr.on('data', function (chunk) {
                    var line = chunk.toString('UTF-8');
                    log += line + '\n';
                    if (errorTimeout) {
                        clearTimeout(errorTimeout);
                    }
                    if (!~line.indexOf('--production')) {
                        // We will exit 1s after last error in stderr.
                        errorTimeout = setTimeout(function () {
                            clearTimeoutsAndIntervals();
                            kill();
                            writeLog();
                            reject('error');
                        }, 1000);
                    }
                });

                child.stdout.on('data', function (chunk) {
                    var line = chunk.toString('UTF-8');
                    if (!desiredExit && line.trim().replace(/[\n\r\t\v\f]+/gm, '') !== '') {
                        var linesToDisplay = line.trim().split('\n\r');
                        // Only display last line from the chunk.
                        var sanitizedLine = linesToDisplay.pop().replace(/[\n\r\t\v\f]+/gm, '');
                        sll(sanitizedLine);
                    }
                    log += line + '\n';
                    if (~line.indexOf('after_platform_add')) {
                        sll('');
                        _this5.log.info('done... 10%');
                    }

                    if (~line.indexOf('Local package version')) {
                        if (messageTimeout) {
                            clearTimeout(messageTimeout);
                        }
                        messageTimeout = setTimeout(function () {
                            sll('');
                            _this5.log.info('building in progress...');
                        }, 1500);
                    }

                    if (~line.indexOf('Preparing Cordova project')) {
                        sll('');
                        _this5.log.info('done... 60%');
                    }

                    if (~line.indexOf('Can\'t listen on port')) {
                        portProblem = true;
                    }

                    if (~line.indexOf('Your application has errors')) {
                        if (errorTimeout) {
                            clearTimeout(errorTimeout);
                        }
                        errorTimeout = setTimeout(function () {
                            clearTimeoutsAndIntervals();
                            kill();
                            writeLog();
                            reject('errorInApp');
                        }, 1000);
                    }

                    if (~line.indexOf('App running at')) {
                        copyBuild();
                    }
                });

                // When Meteor exits
                child.on('exit', function () {
                    sll('');
                    clearTimeoutsAndIntervals();
                    if (!desiredExit) {
                        writeLog();
                        if (portProblem) {
                            reject('port');
                        } else {
                            reject('exit');
                        }
                    }
                });

                buildTimeout = setTimeout(function () {
                    kill();
                    writeLog();
                    reject('timeout');
                }, _this5.$.env.options.buildTimeout ? _this5.$.env.options.buildTimeout * 1000 : 600000);
            });
        }
    }, {
        key: 'updateDdpUrl',
        value: function updateDdpUrl(indexHtml) {
            var content = void 0;
            var runtimeConfig = void 0;

            try {
                content = _fs2.default.readFileSync(indexHtml, 'UTF-8');
            } catch (e) {
                this.log.error('error loading index.html file: ' + e.message);
                process.exit(1);
            }
            if (!this.matcher.test(content)) {
                this.log.error('could not find runtime config in index file');
                process.exit(1);
            }

            try {
                var matches = content.match(this.matcher);
                runtimeConfig = JSON.parse(decodeURIComponent(matches[1]));
            } catch (e) {
                this.log.error('could not find runtime config in index file');
                process.exit(1);
            }

            if (this.$.env.options.ddpUrl.substr(-1, 1) !== '/') {
                this.$.env.options.ddpUrl += '/';
            }

            runtimeConfig.ROOT_URL = this.$.env.options.ddpUrl;
            runtimeConfig.DDP_DEFAULT_CONNECTION_URL = this.$.env.options.ddpUrl;

            content = content.replace(this.replacer, '$1"' + encodeURIComponent((0, _stringify2.default)(runtimeConfig)) + '"$3');

            try {
                _fs2.default.writeFileSync(indexHtml, content);
            } catch (e) {
                this.log.error('error writing index.html file: ' + e.message);
                process.exit(1);
            }
            this.log.info('successfully updated ddp string in the runtime config of a mobile build');
        }

        /**
         * Prepares the arguments passed to `meteor` command.
         * @returns {string[]}
         */

    }, {
        key: 'prepareArguments',
        value: function prepareArguments() {
            var args = ['run', '--verbose', '--mobile-server=' + this.$.env.options.ddpUrl];
            if (this.$.env.isProductionBuild()) {
                args.push('--production');
            }
            args.push('-p');
            if (this.$.env.options.port) {
                args.push(this.$.env.options.port);
            } else {
                args.push('3080');
            }
            return args;
        }

        /**
         * Validates the mobile build and copies it into electron app.
         */

    }, {
        key: 'copyBuild',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
                var prefix, copyPathPostfix, indexHtml, cordovaBuild, cordovaBuildIndex, cordovaBuildProgramJson, programJson;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                this.log.debug('clearing build dir');
                                _context6.prev = 1;
                                _context6.next = 4;
                                return this.$.utils.rmWithRetries('-rf', this.$.env.paths.electronApp.meteorApp);

                            case 4:
                                _context6.next = 9;
                                break;

                            case 6:
                                _context6.prev = 6;
                                _context6.t0 = _context6['catch'](1);
                                throw new Error(_context6.t0);

                            case 9:
                                prefix = 'cordovaBuild';
                                copyPathPostfix = '';

                                if (!(this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER)) {
                                    _context6.next = 28;
                                    break;
                                }

                                prefix = 'webCordova';
                                copyPathPostfix = _path2.default.sep + '*';
                                indexHtml = void 0;
                                _context6.prev = 15;

                                _fs2.default.mkdir(this.$.env.paths.electronApp.meteorApp);
                                _context6.next = 19;
                                return this.acquireIndex();

                            case 19:
                                indexHtml = _context6.sent;

                                _fs2.default.writeFileSync(this.$.env.paths.electronApp.meteorAppIndex, indexHtml);
                                this.log.info('successfully downloaded index.html from running meteor app');
                                _context6.next = 28;
                                break;

                            case 24:
                                _context6.prev = 24;
                                _context6.t1 = _context6['catch'](15);

                                this.log.error('error while trying to download index.html for web.cordova, ' + 'be sure that you are running a mobile target or with' + ' --mobile-server: ', _context6.t1);
                                throw _context6.t1;

                            case 28:
                                cordovaBuild = this.$.env.paths.meteorApp[prefix];
                                cordovaBuildIndex = this.$.env.paths.meteorApp.cordovaBuildIndex;
                                cordovaBuildProgramJson = this.$.env.paths.meteorApp[prefix + 'ProgramJson'];

                                if (this.$.utils.exists(cordovaBuild)) {
                                    _context6.next = 35;
                                    break;
                                }

                                this.log.error('no mobile build found at ' + cordovaBuild);
                                this.log.error('are you sure you did run meteor with --mobile-server?');
                                throw new Error('required file not present');

                            case 35:
                                if (this.$.utils.exists(cordovaBuildProgramJson)) {
                                    _context6.next = 39;
                                    break;
                                }

                                this.log.error('no program.json found in mobile build found at ' + ('' + cordovaBuild));
                                this.log.error('are you sure you did run meteor with --mobile-server?');
                                throw new Error('required file not present');

                            case 39:
                                if (!(this.indexHTMLstrategy !== this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER)) {
                                    _context6.next = 44;
                                    break;
                                }

                                if (this.$.utils.exists(cordovaBuildIndex)) {
                                    _context6.next = 44;
                                    break;
                                }

                                this.log.error('no index.html found in cordova build found at ' + ('' + cordovaBuild));
                                this.log.error('are you sure you did run meteor with --mobile-server?');
                                throw new Error('required file not present');

                            case 44:

                                this.log.verbose('copying mobile build');
                                _shelljs2.default.cp('-R', '' + cordovaBuild + copyPathPostfix, this.$.env.paths.electronApp.meteorApp);

                                // Because of various permission problems here we try to clear te path by clearing
                                // all possible restrictions.
                                _shelljs2.default.chmod('-R', '777', this.$.env.paths.electronApp.meteorApp);
                                if (this.$.env.os.isWindows) {
                                    _shelljs2.default.exec('attrib -r ' + this.$.env.paths.electronApp.meteorApp + _path2.default.sep + '*.* /s');
                                }

                                if (!(this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER)) {
                                    _context6.next = 62;
                                    break;
                                }

                                programJson = void 0;
                                _context6.prev = 50;
                                _context6.next = 53;
                                return this.acquireManifest();

                            case 53:
                                programJson = _context6.sent;

                                _fs2.default.writeFileSync(this.$.env.paths.electronApp.meteorAppProgramJson, (0, _stringify2.default)(programJson, null, 4));
                                this.log.info('successfully downloaded manifest.json from running meteor app');
                                _context6.next = 62;
                                break;

                            case 58:
                                _context6.prev = 58;
                                _context6.t2 = _context6['catch'](50);

                                this.log.error('error while trying to download manifest.json for web.cordova,' + ' be sure that you are running a mobile target or with' + ' --mobile-server: ', _context6.t2);
                                throw _context6.t2;

                            case 62:

                                this.log.info('mobile build copied to electron app');

                                this.log.debug('copy cordova.js to meteor build');
                                _shelljs2.default.cp(join(__dirname, '..', 'skeleton', 'cordova.js'), this.$.env.paths.electronApp.meteorApp);

                            case 65:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this, [[1, 6], [15, 24], [50, 58]]);
            }));

            function copyBuild() {
                return _ref6.apply(this, arguments);
            }

            return copyBuild;
        }()

        /**
         * Injects Meteor.isDesktop
         */

    }, {
        key: 'injectIsDesktop',
        value: function injectIsDesktop() {
            var _this6 = this;

            this.log.info('injecting isDesktop');

            var manifestJsonPath = this.$.env.paths.meteorApp.cordovaBuildProgramJson;
            if (this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER) {
                manifestJsonPath = this.$.env.paths.meteorApp.webCordovaProgramJson;
            }

            try {
                (function () {
                    var manifest = JSON.parse(_fs2.default.readFileSync(manifestJsonPath, 'UTF-8')).manifest;
                    var injected = false;
                    var injectedStartupDidComplete = false;
                    var result = null;

                    // We will search in every .js file in the manifest.
                    // We could probably detect whether this is a dev or production build and only search in
                    // the correct files, but for now this should be fine.
                    manifest.forEach(function (file) {
                        var fileContents = void 0;
                        // Hacky way of setting isDesktop.
                        if (file.type === 'js') {
                            fileContents = _fs2.default.readFileSync(join(_this6.$.env.paths.electronApp.meteorApp, file.path), 'UTF-8');
                            result = _this6.injector.processFileContents(fileContents);

                            fileContents = result.fileContents;
                            injectedStartupDidComplete = result.injectedStartupDidComplete ? true : injectedStartupDidComplete;
                            injected = result.injected ? true : injected;

                            _fs2.default.writeFileSync(join(_this6.$.env.paths.electronApp.meteorApp, file.path), fileContents);
                        }
                    });

                    if (!injected) {
                        _this6.log.error('error injecting isDesktop global var.');
                        process.exit(1);
                    }
                    if (!injectedStartupDidComplete) {
                        _this6.log.error('error injecting isDesktop for startupDidComplete');
                        process.exit(1);
                    }
                })();
            } catch (e) {
                this.log.error('error occurred while injecting isDesktop: ', e);
                process.exit(1);
            }
            this.log.info('injected successfully');
        }

        /**
         * Builds, modifies and copies the meteor app to electron app.
         */

    }, {
        key: 'build',
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                this.log.info('checking for any mobile platform');
                                _context7.prev = 1;
                                _context7.next = 4;
                                return this.checkPreconditions();

                            case 4:
                                _context7.next = 10;
                                break;

                            case 6:
                                _context7.prev = 6;
                                _context7.t0 = _context7['catch'](1);

                                this.log.error('error occurred during checking preconditions: ', _context7.t0);
                                process.exit(1);

                            case 10:

                                this.log.info('building meteor app');

                                if (this.$.env.options.skipMobileBuild) {
                                    _context7.next = 41;
                                    break;
                                }

                                _context7.prev = 12;
                                _context7.next = 15;
                                return this.buildMobileTarget();

                            case 15:
                                _context7.next = 39;
                                break;

                            case 17:
                                _context7.prev = 17;
                                _context7.t1 = _context7['catch'](12);
                                _context7.t2 = _context7.t1;
                                _context7.next = _context7.t2 === 'timeout' ? 22 : _context7.t2 === 'error' ? 24 : _context7.t2 === 'errorInApp' ? 26 : _context7.t2 === 'port' ? 28 : _context7.t2 === 'exit' ? 30 : _context7.t2 === 'copy' ? 32 : 34;
                                break;

                            case 22:
                                this.log.error('timeout while building, log has been written to meteor.log');
                                return _context7.abrupt('break', 35);

                            case 24:
                                this.log.error('some errors were reported during build, check meteor.log for more' + ' info');
                                return _context7.abrupt('break', 35);

                            case 26:
                                this.log.error('your meteor app has errors - look into meteor.log for more' + ' info');
                                return _context7.abrupt('break', 35);

                            case 28:
                                this.log.error('your port 3080 is currently used (you probably have this or other ' + 'meteor project running?), use `-t` or `--meteor-port` to use ' + 'different port while building');
                                return _context7.abrupt('break', 35);

                            case 30:
                                this.log.error('meteor cmd exited unexpectedly, log has been written to meteor.log');
                                return _context7.abrupt('break', 35);

                            case 32:
                                this.log.error('error encountered when copying the build');
                                return _context7.abrupt('break', 35);

                            case 34:
                                this.log.error('error occurred during building mobile target', _context7.t1);

                            case 35:
                                if (!this.mobilePlatform) {
                                    _context7.next = 38;
                                    break;
                                }

                                _context7.next = 38;
                                return this.removeMobilePlatform(this.mobilePlatform);

                            case 38:
                                process.exit(1);

                            case 39:
                                _context7.next = 50;
                                break;

                            case 41:
                                this.indexHTMLstrategy = this.chooseStrategy();
                                _context7.prev = 42;
                                _context7.next = 45;
                                return this.copyBuild();

                            case 45:
                                _context7.next = 50;
                                break;

                            case 47:
                                _context7.prev = 47;
                                _context7.t3 = _context7['catch'](42);

                                process.exit(1);

                            case 50:

                                this.injectIsDesktop();

                                this.changeDdpUrl();

                                _context7.prev = 52;
                                _context7.next = 55;
                                return this.packToAsar();

                            case 55:
                                _context7.next = 61;
                                break;

                            case 57:
                                _context7.prev = 57;
                                _context7.t4 = _context7['catch'](52);

                                this.log.error('error while packing meteor app to asar');
                                process.exit(1);

                            case 61:

                                this.log.info('meteor build finished');

                                if (!this.mobilePlatform) {
                                    _context7.next = 65;
                                    break;
                                }

                                _context7.next = 65;
                                return this.removeMobilePlatform(this.mobilePlatform);

                            case 65:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this, [[1, 6], [12, 17], [42, 47], [52, 57]]);
            }));

            function build() {
                return _ref7.apply(this, arguments);
            }

            return build;
        }()
    }, {
        key: 'changeDdpUrl',
        value: function changeDdpUrl() {
            if (this.$.env.options.ddpUrl !== null) {
                try {
                    this.updateDdpUrl(this.$.env.paths.electronApp.meteorAppIndex);
                } catch (e) {
                    this.log.error('error while trying to change the ddp url: ' + e.message);
                }
            }
        }
    }, {
        key: 'packToAsar',
        value: function packToAsar() {
            var _this7 = this;

            this.log.info('packing meteor app to asar archive');
            return new _promise2.default(function (resolve, reject) {
                return _asar2.default.createPackage(_this7.$.env.paths.electronApp.meteorApp, _path2.default.join(_this7.$.env.paths.electronApp.root, 'meteor.asar'), function () {
                    // On Windows some files might still be blocked. Giving a tick for them to be
                    // ready for deletion.
                    (0, _setImmediate3.default)(function () {
                        _this7.log.verbose('clearing meteor app after packing');
                        _this7.$.utils.rmWithRetries('-rf', _this7.$.env.paths.electronApp.meteorApp).then(function () {
                            resolve();
                        }).catch(function (e) {
                            reject(e);
                        });
                    });
                });
            });
        }
    }]);
    return MeteorApp;
}();

exports.default = MeteorApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9tZXRlb3JBcHAuanMiXSwibmFtZXMiOlsiam9pbiIsInNsbCIsInN0ZG91dCIsIk1ldGVvckFwcCIsIiQiLCJsb2ciLCJtb2JpbGVQbGF0Zm9ybSIsIm9sZE1hbmlmZXN0IiwiaW5qZWN0b3IiLCJtYXRjaGVyIiwiUmVnRXhwIiwicmVwbGFjZXIiLCJtZXRlb3JWZXJzaW9uIiwiaW5kZXhIVE1Mc3RyYXRlZ3kiLCJpbmRleEhUTUxTdHJhdGVnaWVzIiwiSU5ERVhfRlJPTV9DT1JET1ZBX0JVSUxEIiwiSU5ERVhfRlJPTV9SVU5OSU5HX1NFUlZFUiIsInBhY2thZ2VzIiwidXNlZFBhY2thZ2VzIiwicmVhZEZpbGVTeW5jIiwiZW52IiwicGF0aHMiLCJtZXRlb3JBcHAiLCJzcGxpdCIsInNvbWUiLCJtZXRlb3JQYWNrYWdlIiwiaW5kZXhPZiIsInBhY2thZ2VUb0ZpbmQiLCJ2ZXJzaW9ucyIsInBhY2thZ2VzV2l0aFZlcnNpb24iLCJ3aG8iLCJjaGVja1BhY2thZ2VzIiwid2FybiIsImFkZFBhY2thZ2VzIiwiRXJyb3IiLCJjaGVja1BhY2thZ2VzVmVyc2lvbiIsImRlc2t0b3AiLCJnZXRTZXR0aW5ncyIsImRlc2t0b3BIQ1AiLCJ2ZXJib3NlIiwibWFwIiwicGFja2FnZU5hbWUiLCJnZXRWZXJzaW9uIiwiZW5zdXJlUGFja2FnZXMiLCJpbmZvIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbmNhdCIsInJlcGxhY2UiLCJjd2QiLCJyb290Iiwic3RkaW8iLCJwcm9jZXNzIiwic3RkZXJyIiwiTUVURU9SX1BSRVRUWV9PVVRQVVQiLCJNRVRFT1JfTk9fUkVMRUFTRV9DSEVDSyIsIm9uIiwiY29kZSIsImdpdElnbm9yZSIsImZpbHRlciIsImlnbm9yZWRQYXRoIiwidHJpbSIsImVsZWN0cm9uQXBwIiwicm9vdE5hbWUiLCJwdXNoIiwid3JpdGVGaWxlU3luYyIsInJlbGVhc2UiLCJ2ZXJzaW9uUmFuZ2UiLCJnZXRNZXRlb3JSZWxlYXNlIiwibWF0Y2giLCJzYXRpc2ZpZXMiLCJvcHRpb25zIiwic2tpcE1vYmlsZUJ1aWxkIiwiZXJyb3IiLCJleGl0IiwiZm9yY2VDb3Jkb3ZhQnVpbGQiLCJleHBsb2RlZFZlcnNpb24iLCJsZW5ndGgiLCJjaGVja01ldGVvclZlcnNpb24iLCJjaG9vc2VTdHJhdGVneSIsImRlYnVnIiwicGxhdGZvcm1zIiwiYW5kcm9pZCIsImFkZE1vYmlsZVBsYXRmb3JtIiwicGxhdGZvcm0iLCJ1dGlscyIsImV4aXN0cyIsImNvcmRvdmFCdWlsZEluZGV4IiwiY29yZG92YUJ1aWxkUHJvZ3JhbUpzb24iLCJ3ZWJDb3Jkb3ZhUHJvZ3JhbUpzb24iLCJwb3J0IiwicmVzIiwidGV4dCIsIkpTT04iLCJwYXJzZSIsInByb2dyYW1Kc29uIiwic2VsZiIsImRlc2lyZWRFeGl0IiwiYnVpbGRUaW1lb3V0IiwiZXJyb3JUaW1lb3V0IiwibWVzc2FnZVRpbWVvdXQiLCJraWxsVGltZW91dCIsImNvcmRvdmFDaGVja0ludGVydmFsIiwicG9ydFByb2JsZW0iLCJ3aW5kb3dzS2lsbCIsInBpZCIsInN5bmMiLCJvdXQiLCJ0b1N0cmluZyIsImFyZ3MiLCJwcmVwYXJlQXJndW1lbnRzIiwicmVnZXhWMSIsInJlZ2V4VjIiLCJmb3JFYWNoIiwibGluZSIsImV4ZWMiLCJ3cml0ZUxvZyIsImNsZWFyVGltZW91dHNBbmRJbnRlcnZhbHMiLCJjbGVhckludGVydmFsIiwiY2xlYXJUaW1lb3V0IiwiY2hpbGQiLCJzaGVsbCIsImtpbGwiLCJvcyIsImlzV2luZG93cyIsInNldFRpbWVvdXQiLCJjb3B5QnVpbGQiLCJ0aGVuIiwiY2F0Y2giLCJzZXRJbnRlcnZhbCIsImlzQ29yZG92YUJ1aWxkUmVhZHkiLCJjaHVuayIsImxpbmVzVG9EaXNwbGF5Iiwic2FuaXRpemVkTGluZSIsInBvcCIsImluZGV4SHRtbCIsImNvbnRlbnQiLCJydW50aW1lQ29uZmlnIiwiZSIsIm1lc3NhZ2UiLCJ0ZXN0IiwibWF0Y2hlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsImRkcFVybCIsInN1YnN0ciIsIlJPT1RfVVJMIiwiRERQX0RFRkFVTFRfQ09OTkVDVElPTl9VUkwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc1Byb2R1Y3Rpb25CdWlsZCIsInJtV2l0aFJldHJpZXMiLCJwcmVmaXgiLCJjb3B5UGF0aFBvc3RmaXgiLCJzZXAiLCJta2RpciIsImFjcXVpcmVJbmRleCIsIm1ldGVvckFwcEluZGV4IiwiY29yZG92YUJ1aWxkIiwiY3AiLCJjaG1vZCIsImFjcXVpcmVNYW5pZmVzdCIsIm1ldGVvckFwcFByb2dyYW1Kc29uIiwiX19kaXJuYW1lIiwibWFuaWZlc3RKc29uUGF0aCIsIm1hbmlmZXN0IiwiaW5qZWN0ZWQiLCJpbmplY3RlZFN0YXJ0dXBEaWRDb21wbGV0ZSIsInJlc3VsdCIsImZpbGUiLCJmaWxlQ29udGVudHMiLCJ0eXBlIiwicGF0aCIsInByb2Nlc3NGaWxlQ29udGVudHMiLCJjaGVja1ByZWNvbmRpdGlvbnMiLCJidWlsZE1vYmlsZVRhcmdldCIsInJlbW92ZU1vYmlsZVBsYXRmb3JtIiwiaW5qZWN0SXNEZXNrdG9wIiwiY2hhbmdlRGRwVXJsIiwicGFja1RvQXNhciIsInVwZGF0ZURkcFVybCIsImNyZWF0ZVBhY2thZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztJQUVRQSxJLGtCQUFBQSxJOztBQUNSLElBQU1DLE1BQU0sd0JBQWNDLE1BQTFCOztBQUVBOztBQUVBOzs7Ozs7SUFLcUJDLFM7O0FBRWpCOzs7O0FBSUEsdUJBQVlDLENBQVosRUFBZTtBQUFBOztBQUNYLGFBQUtDLEdBQUwsR0FBVyxrQkFBUSxXQUFSLENBQVg7QUFDQSxhQUFLRCxDQUFMLEdBQVNBLENBQVQ7QUFDQSxhQUFLRSxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsYUFBS0MsV0FBTCxHQUFtQixJ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QkFQTDtBQVFILHFCQVZEO0FBV0gsaUJBakJMLENBRGU7QUFBQSxhQUFaLENBQVA7QUFxQkg7Ozs7O2tCQTcyQmdCdkksUyIsImZpbGUiOiJtZXRlb3JBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHNwYXduIGZyb20gJ2Nyb3NzLXNwYXduJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcbmltcG9ydCBzaGVsbCBmcm9tICdzaGVsbGpzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHNpbmdsZUxpbmVMb2cgZnJvbSAnc2luZ2xlLWxpbmUtbG9nJztcbmltcG9ydCBhc2FyIGZyb20gJ2FzYXInO1xuaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuXG5pbXBvcnQgSXNEZXNrdG9wSW5qZWN0b3IgZnJvbSAnLi4vc2tlbGV0b24vbW9kdWxlcy9hdXRvdXBkYXRlL2lzRGVza3RvcEluamVjdG9yJztcbmltcG9ydCBMb2cgZnJvbSAnLi9sb2cnO1xuXG5jb25zdCB7IGpvaW4gfSA9IHBhdGg7XG5jb25zdCBzbGwgPSBzaW5nbGVMaW5lTG9nLnN0ZG91dDtcblxuLy8gVE9ETzogcmVmYWN0b3IgYWxsIHN0cmF0ZWd5IGlmcyB0byBvbmUgcGxhY2VcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBNZXRlb3IgYXBwLlxuICogQHByb3BlcnR5IHtNZXRlb3JEZXNrdG9wfSAkXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWV0ZW9yQXBwIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TWV0ZW9yRGVza3RvcH0gJCAtIGNvbnRleHRcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigkKSB7XG4gICAgICAgIHRoaXMubG9nID0gbmV3IExvZygnbWV0ZW9yQXBwJyk7XG4gICAgICAgIHRoaXMuJCA9ICQ7XG4gICAgICAgIHRoaXMubW9iaWxlUGxhdGZvcm0gPSBudWxsO1xuICAgICAgICB0aGlzLm9sZE1hbmlmZXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbmplY3RvciA9IG5ldyBJc0Rlc2t0b3BJbmplY3RvcigpO1xuICAgICAgICB0aGlzLm1hdGNoZXIgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ19fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18gPSBKU09OLnBhcnNlXFxcXChkZWNvZGVVUklDb21wb25lbnRcXFxcKFwiKFteXCJdKilcIlxcXFwpXFxcXCknXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucmVwbGFjZXIgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJyhfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fID0gSlNPTi5wYXJzZVxcXFwoZGVjb2RlVVJJQ29tcG9uZW50XFxcXCgpXCIoW15cIl0qKVwiKFxcXFwpXFxcXCkpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLm1ldGVvclZlcnNpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmluZGV4SFRNTHN0cmF0ZWd5ID0gbnVsbDtcblxuICAgICAgICB0aGlzLmluZGV4SFRNTFN0cmF0ZWdpZXMgPSB7XG4gICAgICAgICAgICBJTkRFWF9GUk9NX0NPUkRPVkFfQlVJTEQ6IDEsXG4gICAgICAgICAgICBJTkRFWF9GUk9NX1JVTk5JTkdfU0VSVkVSOiAyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9va3MgZm9yIHNwZWNpZmllZCBwYWNrYWdlcyBpbiAubWV0ZW9yL3BhY2thZ2VzLiBJbiBvdGhlciB3b3JkcyBjaGVja3MgaWYgdGhlIHByb2plY3QgaGFzXG4gICAgICogc3BlY2lmaWVkIHBhY2thZ2VzIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhY2thZ2VzXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgY2hlY2tQYWNrYWdlcyhwYWNrYWdlcykge1xuICAgICAgICBjb25zdCB1c2VkUGFja2FnZXMgPSBmcy5yZWFkRmlsZVN5bmModGhpcy4kLmVudi5wYXRocy5tZXRlb3JBcHAucGFja2FnZXMsICdVVEYtOCcpLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgcmV0dXJuICFwYWNrYWdlcy5zb21lKFxuICAgICAgICAgICAgcGFja2FnZVRvRmluZCA9PlxuICAgICAgICAgICAgICAgICF1c2VkUGFja2FnZXMuc29tZShtZXRlb3JQYWNrYWdlID0+IH5tZXRlb3JQYWNrYWdlLmluZGV4T2YocGFja2FnZVRvRmluZCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9va3MgZm9yIHNwZWNpZmllZCBwYWNrYWdlcyBpbiAubWV0ZW9yL3BhY2thZ2VzLiBJbiBvdGhlciB3b3JkcyBjaGVja3MgaWYgdGhlIHByb2plY3QgaGFzXG4gICAgICogc3BlY2lmaWVkIHBhY2thZ2VzIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhY2thZ2VzXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgY2hlY2tQYWNrYWdlc1ZlcnNpb24ocGFja2FnZXMpIHtcbiAgICAgICAgY29uc3QgdXNlZFBhY2thZ2VzID0gZnMucmVhZEZpbGVTeW5jKHRoaXMuJC5lbnYucGF0aHMubWV0ZW9yQXBwLnZlcnNpb25zLCAnVVRGLTgnKS5zcGxpdCgnXFxuJyk7XG4gICAgICAgIHJldHVybiAhcGFja2FnZXMuc29tZShcbiAgICAgICAgICAgIHBhY2thZ2VUb0ZpbmQgPT4gIXVzZWRQYWNrYWdlcy5zb21lKG1ldGVvclBhY2thZ2UgPT4gbWV0ZW9yUGFja2FnZSA9PT0gcGFja2FnZVRvRmluZClcbiAgICAgICAgKTtcbiAgICB9XG5cblxuICAgIGFzeW5jIGVuc3VyZVBhY2thZ2VzKHBhY2thZ2VzLCBwYWNrYWdlc1dpdGhWZXJzaW9uLCB3aG8pIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrUGFja2FnZXMocGFja2FnZXMpKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy53YXJuKGAke3dob30gcmVxdWlyZXMgc29tZSBwYWNrYWdlcyB0aGF0IGFyZSBub3QgYWRkZWQgdG8gcHJvamVjdCwgd2lsbCB0cnkgdG8gYWRkIHRoZW0gbm93YCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkUGFja2FnZXMocGFja2FnZXMsIHBhY2thZ2VzV2l0aFZlcnNpb24pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuY2hlY2tQYWNrYWdlc1ZlcnNpb24ocGFja2FnZXNXaXRoVmVyc2lvbikpIHtcbiAgICAgICAgICAgIHRoaXMubG9nLndhcm4oYCR7d2hvfSByZXF1aXJlZCBwYWNrYWdlcyB2ZXJzaW9uIGlzIGRpZmZlcmVudCwgZml4aW5nIGl0YCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkUGFja2FnZXMocGFja2FnZXMsIHBhY2thZ2VzV2l0aFZlcnNpb24pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgdGhhdCByZXF1aXJlZCBwYWNrYWdlcyBhcmUgYWRkZWQgdG8gdGhlIE1ldGVvciBhcHAuXG4gICAgICovXG4gICAgYXN5bmMgZW5zdXJlRGVza3RvcEhDUFBhY2thZ2VzKCkge1xuICAgICAgICBpZiAodGhpcy4kLmRlc2t0b3AuZ2V0U2V0dGluZ3MoKS5kZXNrdG9wSENQKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy52ZXJib3NlKCdkZXNrdG9wSENQIGlzIGVuYWJsZWQsIGNoZWNraW5nIGZvciByZXF1aXJlZCBwYWNrYWdlcycpO1xuXG4gICAgICAgICAgICBjb25zdCBwYWNrYWdlcyA9IFsnb21lZ2E6bWV0ZW9yLWRlc2t0b3Atd2F0Y2hlcicsICdvbWVnYTptZXRlb3ItZGVza3RvcC1idW5kbGVyJ107XG4gICAgICAgICAgICBjb25zdCBwYWNrYWdlc1dpdGhWZXJzaW9uID0gcGFja2FnZXMubWFwKHBhY2thZ2VOYW1lID0+IGAke3BhY2thZ2VOYW1lfUAke3RoaXMuJC5nZXRWZXJzaW9uKCl9YCk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVQYWNrYWdlcyhwYWNrYWdlcywgcGFja2FnZXNXaXRoVmVyc2lvbiwgJ2Rlc2t0b3BIQ1AnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZy52ZXJib3NlKCdkZXNrdG9wSENQIGlzIG5vdCBlbmFibGVkLCBza2lwcGluZyBjaGVja2luZyBmb3IgcmVxdWlyZWQgcGFja2FnZXMnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgcGFja2FnZXMgdG8gdGhlIG1ldGVvciBhcHAuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFja2FnZXMgICAgICAgICAgICAtIGFycmF5IHdpdGggbmFtZXMgb2YgdGhlIHBhY2thZ2VzIHRvIGFkZFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhY2thZ2VzV2l0aFZlcnNpb24gLSBhcnJheSB3aXRoIG5hbWVzIGFuZCB2ZXJzaW9ucyBvZiB0aGUgcGFja2FnZXMgdG8gYWRkXG4gICAgICovXG4gICAgYWRkUGFja2FnZXMocGFja2FnZXMsIHBhY2thZ2VzV2l0aFZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5sb2cuaW5mbygnYWRkaW5nIHBhY2thZ2VzIHRvIG1ldGVvciBwcm9qZWN0JywgcGFja2FnZXNXaXRoVmVyc2lvbik7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBzcGF3bihcbiAgICAgICAgICAgICAgICAnbWV0ZW9yJyxcbiAgICAgICAgICAgICAgICBbJ2FkZCddLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgcGFja2FnZXNXaXRoVmVyc2lvbi5tYXAocGFja2FnZU5hbWUgPT4gcGFja2FnZU5hbWUucmVwbGFjZSgnQCcsICdAPScpKSksXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjd2Q6IHRoaXMuJC5lbnYucGF0aHMubWV0ZW9yQXBwLnJvb3QsXG4gICAgICAgICAgICAgICAgICAgIHN0ZGlvOiBbJ3BpcGUnLCAncGlwZScsIHByb2Nlc3Muc3RkZXJyXSxcbiAgICAgICAgICAgICAgICAgICAgZW52OiBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBNRVRFT1JfUFJFVFRZX09VVFBVVDogMCwgTUVURU9SX05PX1JFTEVBU0VfQ0hFQ0s6IDEgfSwgcHJvY2Vzcy5lbnYpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKS5vbignZXhpdCcsIChjb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgIT09IDAgfHwgIXRoaXMuY2hlY2tQYWNrYWdlcyhwYWNrYWdlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdhZGRpbmcgcGFja2FnZXMgZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGVudHJ5IHRvIC5tZXRlb3IvLmdpdGlnbm9yZSBpZiBuZWNlc3NhcnkuXG4gICAgICovXG4gICAgdXBkYXRlR2l0SWdub3JlKCkge1xuICAgICAgICB0aGlzLmxvZy52ZXJib3NlKCd1cGRhdGluZyAubWV0ZW9yLy5naXRpZ25vcmUnKTtcbiAgICAgICAgLy8gTGV0cyByZWFkIHRoZSAubWV0ZW9yLy5naXRpZ25vcmUgYW5kIGZpbHRlciBvdXQgYmxhbmsgbGluZXMuXG4gICAgICAgIGNvbnN0IGdpdElnbm9yZSA9IGZzLnJlYWRGaWxlU3luYyh0aGlzLiQuZW52LnBhdGhzLm1ldGVvckFwcC5naXRJZ25vcmUsICdVVEYtOCcpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcbicpLmZpbHRlcihpZ25vcmVkUGF0aCA9PiBpZ25vcmVkUGF0aC50cmltKCkgIT09ICcnKTtcblxuICAgICAgICBpZiAoIX5naXRJZ25vcmUuaW5kZXhPZih0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLnJvb3ROYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5sb2cudmVyYm9zZShgYWRkaW5nICR7dGhpcy4kLmVudi5wYXRocy5lbGVjdHJvbkFwcC5yb290TmFtZX0gdG8gLm1ldGVvci8uZ2l0aWdub3JlYCk7XG4gICAgICAgICAgICBnaXRJZ25vcmUucHVzaCh0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLnJvb3ROYW1lKTtcblxuICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyh0aGlzLiQuZW52LnBhdGhzLm1ldGVvckFwcC5naXRJZ25vcmUsIGdpdElnbm9yZS5qb2luKCdcXG4nKSwgJ1VURi04Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkcyB0aGUgTWV0ZW9yIHJlbGVhc2UgdmVyc2lvbiB1c2VkIGluIHRoZSBhcHAuXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRNZXRlb3JSZWxlYXNlKCkge1xuICAgICAgICBsZXQgcmVsZWFzZSA9IGZzLnJlYWRGaWxlU3luYyh0aGlzLiQuZW52LnBhdGhzLm1ldGVvckFwcC5yZWxlYXNlLCAnVVRGLTgnKS5zcGxpdCgnXFxuJylbMF07XG4gICAgICAgIHJlbGVhc2UgPSByZWxlYXNlLnNwbGl0KCdAJylbMV07XG4gICAgICAgIC8vIFdlIGRvIG5vdCBjYXJlIGlmIGl0IGlzIGJldGEuXG4gICAgICAgIGlmICh+cmVsZWFzZS5pbmRleE9mKCctJykpIHtcbiAgICAgICAgICAgIHJlbGVhc2UgPSByZWxlYXNlLnNwbGl0KCctJylbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbGVhc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgbWV0ZW9yIHZlcnNpb24gYWdhaW5zdCBhIHZlcnNpb25SYW5nZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvblJhbmdlIC0gc2VtdmVyIHZlcnNpb24gcmFuZ2VcbiAgICAgKi9cbiAgICBjaGVja01ldGVvclZlcnNpb24odmVyc2lvblJhbmdlKSB7XG4gICAgICAgIGxldCByZWxlYXNlID0gdGhpcy5nZXRNZXRlb3JSZWxlYXNlKCk7XG4gICAgICAgIHJlbGVhc2UgPSByZWxlYXNlLm1hdGNoKC8oXlxcZCtcXC5cXGQrXFwuXFxkKykvZ21pKVswXTtcbiAgICAgICAgaWYgKCFzZW12ZXIuc2F0aXNmaWVzKHJlbGVhc2UsIHZlcnNpb25SYW5nZSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLiQuZW52Lm9wdGlvbnMuc2tpcE1vYmlsZUJ1aWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoYHdyb25nIG1ldGVvciB2ZXJzaW9uICgke3JlbGVhc2V9KSBpbiBwcm9qZWN0IC0gb25seSBgICtcbiAgICAgICAgICAgICAgICAgICAgYCR7dmVyc2lvblJhbmdlfSBpcyBzdXBwb3J0ZWRgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoYHdyb25nIG1ldGVvciB2ZXJzaW9uICgke3JlbGVhc2V9KSBpbiBwcm9qZWN0IC0gb25seSBgICtcbiAgICAgICAgICAgICAgICAgICAgYCR7dmVyc2lvblJhbmdlfSBpcyBzdXBwb3J0ZWQgZm9yIGF1dG9tYXRpYyBtZXRlb3IgYnVpbGRzICh5b3UgY2FuIGFsd2F5cyBgICtcbiAgICAgICAgICAgICAgICAgICAgJ3RyeSB3aXRoIGAtLXNraXAtbW9iaWxlLWJ1aWxkYCBpZiB5b3UgYXJlIHVzaW5nIG1ldGVvciA+PSAxLjIuMSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hvb3NlU3RyYXRlZ3koKSB7XG4gICAgICAgIGlmICh0aGlzLiQuZW52Lm9wdGlvbnMuZm9yY2VDb3Jkb3ZhQnVpbGQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4SFRNTFN0cmF0ZWdpZXMuSU5ERVhfRlJPTV9DT1JET1ZBX0JVSUxEO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVsZWFzZSA9IHRoaXMuZ2V0TWV0ZW9yUmVsZWFzZSgpLm1hdGNoKC8oXlxcZCtcXC5cXGQrXFwuXFxkKykvZ21pKVswXTtcbiAgICAgICAgaWYgKHNlbXZlci5zYXRpc2ZpZXMocmVsZWFzZSwgJz4gMS4zLjQnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhIVE1MU3RyYXRlZ2llcy5JTkRFWF9GUk9NX1JVTk5JTkdfU0VSVkVSO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZW12ZXIuc2F0aXNmaWVzKHJlbGVhc2UsICcxLjMuNCcpKSB7XG4gICAgICAgICAgICBjb25zdCBleHBsb2RlZFZlcnNpb24gPSB0aGlzLmdldE1ldGVvclJlbGVhc2UoKS5zcGxpdCgnLicpO1xuICAgICAgICAgICAgaWYgKGV4cGxvZGVkVmVyc2lvbi5sZW5ndGggPj0gNCkge1xuICAgICAgICAgICAgICAgIGlmIChleHBsb2RlZFZlcnNpb25bM10gPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4SFRNTFN0cmF0ZWdpZXMuSU5ERVhfRlJPTV9SVU5OSU5HX1NFUlZFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhIVE1MU3RyYXRlZ2llcy5JTkRFWF9GUk9NX0NPUkRPVkFfQlVJTEQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhIVE1MU3RyYXRlZ2llcy5JTkRFWF9GUk9NX0NPUkRPVkFfQlVJTEQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHJlcXVpcmVkIHByZWNvbmRpdGlvbnMuXG4gICAgICogLSBNZXRlb3IgdmVyc2lvblxuICAgICAqIC0gaXMgbW9iaWxlIHBsYXRmb3JtIGFkZGVkXG4gICAgICovXG4gICAgYXN5bmMgY2hlY2tQcmVjb25kaXRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy4kLmVudi5vcHRpb25zLnNraXBNb2JpbGVCdWlsZCkge1xuICAgICAgICAgICAgdGhpcy5jaGVja01ldGVvclZlcnNpb24oJz49IDEuMi4xJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrTWV0ZW9yVmVyc2lvbignPj0gMS4zLjMnKTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhIVE1Mc3RyYXRlZ3kgPSB0aGlzLmNob29zZVN0cmF0ZWd5KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleEhUTUxzdHJhdGVneSA9PT0gdGhpcy5pbmRleEhUTUxTdHJhdGVnaWVzLklOREVYX0ZST01fQ09SRE9WQV9CVUlMRCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmRlYnVnKFxuICAgICAgICAgICAgICAgICAgICAnbWV0ZW9yIHZlcnNpb24gaXMgPCAxLjMuNC4yIHNvIHRoZSBpbmRleC5odG1sIGZyb20gY29yZG92YS1idWlsZCB3aWxsJyArXG4gICAgICAgICAgICAgICAgICAgICcgYmUgdXNlZCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZyhcbiAgICAgICAgICAgICAgICAgICAgJ21ldGVvciB2ZXJzaW9uIGlzID49IDEuMy40LjIgc28gdGhlIGluZGV4Lmh0bWwgd2lsbCBiZSBkb3dubG9hZGVkICcgK1xuICAgICAgICAgICAgICAgICAgICAnZnJvbSBfX2NvcmRvdmEvaW5kZXguaHRtbCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLiQuZW52Lm9wdGlvbnMuc2tpcE1vYmlsZUJ1aWxkKSB7XG4gICAgICAgICAgICBjb25zdCBwbGF0Zm9ybXMgPSBmcy5yZWFkRmlsZVN5bmModGhpcy4kLmVudi5wYXRocy5tZXRlb3JBcHAucGxhdGZvcm1zLCAnVVRGLTgnKTtcbiAgICAgICAgICAgIGlmICghfnBsYXRmb3Jtcy5pbmRleE9mKCdhbmRyb2lkJykgJiYgIX5wbGF0Zm9ybXMuaW5kZXhPZignaW9zJykpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuJC5lbnYub3B0aW9ucy5hbmRyb2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9iaWxlUGxhdGZvcm0gPSAnaW9zJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vYmlsZVBsYXRmb3JtID0gJ2FuZHJvaWQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxvZy53YXJuKGBubyBtb2JpbGUgdGFyZ2V0IGRldGVjdGVkIC0gd2lsbCBhZGQgJyR7dGhpcy5tb2JpbGVQbGF0Zm9ybX0nIGAgK1xuICAgICAgICAgICAgICAgICAgICAnanVzdCB0byBnZXQgYSBtb2JpbGUgYnVpbGQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZE1vYmlsZVBsYXRmb3JtKHRoaXMubW9iaWxlUGxhdGZvcm0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ2ZhaWxlZCB0byBhZGQgYSBtb2JpbGUgcGxhdGZvcm0gLSBwbGVhc2UgdHJ5IHRvIGRvIGl0IG1hbnVhbGx5Jyk7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmllcyB0byBhZGQgYSBtb2JpbGUgcGxhdGZvcm0gdG8gbWV0ZW9yIHByb2plY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBsYXRmb3JtIC0gcGxhdGZvcm0gdG8gYWRkXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgYWRkTW9iaWxlUGxhdGZvcm0ocGxhdGZvcm0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nLnZlcmJvc2UoYGFkZGluZyBtb2JpbGUgcGxhdGZvcm06ICR7cGxhdGZvcm19YCk7XG4gICAgICAgICAgICBzcGF3bignbWV0ZW9yJywgWydhZGQtcGxhdGZvcm0nLCBwbGF0Zm9ybV0sIHtcbiAgICAgICAgICAgICAgICBjd2Q6IHRoaXMuJC5lbnYucGF0aHMubWV0ZW9yQXBwLnJvb3QsXG4gICAgICAgICAgICAgICAgc3RkaW86IHRoaXMuJC5lbnYuc3RkaW9cbiAgICAgICAgICAgIH0pLm9uKCdleGl0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXRmb3JtcyA9IGZzLnJlYWRGaWxlU3luYyh0aGlzLiQuZW52LnBhdGhzLm1ldGVvckFwcC5wbGF0Zm9ybXMsICdVVEYtOCcpO1xuICAgICAgICAgICAgICAgIGlmICghfnBsYXRmb3Jtcy5pbmRleE9mKCdhbmRyb2lkJykgJiYgIX5wbGF0Zm9ybXMuaW5kZXhPZignaW9zJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmllcyB0byByZW1vdmUgYSBtb2JpbGUgcGxhdGZvcm0gZnJvbSBtZXRlb3IgcHJvamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGxhdGZvcm0gLSBwbGF0Zm9ybSB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICByZW1vdmVNb2JpbGVQbGF0Zm9ybShwbGF0Zm9ybSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2cudmVyYm9zZShgcmVtb3ZpbmcgbW9iaWxlIHBsYXRmb3JtOiAke3BsYXRmb3JtfWApO1xuICAgICAgICAgICAgc3Bhd24oJ21ldGVvcicsIFsncmVtb3ZlLXBsYXRmb3JtJywgcGxhdGZvcm1dLCB7XG4gICAgICAgICAgICAgICAgY3dkOiB0aGlzLiQuZW52LnBhdGhzLm1ldGVvckFwcC5yb290LFxuICAgICAgICAgICAgICAgIHN0ZGlvOiB0aGlzLiQuZW52LnN0ZGlvLFxuICAgICAgICAgICAgICAgIGVudjogT2JqZWN0LmFzc2lnbih7IE1FVEVPUl9QUkVUVFlfT1VUUFVUOiAwIH0sIHByb2Nlc3MuZW52KVxuICAgICAgICAgICAgfSkub24oJ2V4aXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxhdGZvcm1zID0gZnMucmVhZEZpbGVTeW5jKHRoaXMuJC5lbnYucGF0aHMubWV0ZW9yQXBwLnBsYXRmb3JtcywgJ1VURi04Jyk7XG4gICAgICAgICAgICAgICAgaWYgKH5wbGF0Zm9ybXMuaW5kZXhPZihwbGF0Zm9ybSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBKdXN0IGNoZWNrcyBmb3IgaW5kZXguaHRtbCBhbmQgcHJvZ3JhbS5qc29uIGV4aXN0ZW5jZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0NvcmRvdmFCdWlsZFJlYWR5KCkge1xuICAgICAgICBpZiAodGhpcy5pbmRleEhUTUxzdHJhdGVneSA9PT0gdGhpcy5pbmRleEhUTUxTdHJhdGVnaWVzLklOREVYX0ZST01fQ09SRE9WQV9CVUlMRCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJC51dGlscy5leGlzdHModGhpcy4kLmVudi5wYXRocy5tZXRlb3JBcHAuY29yZG92YUJ1aWxkSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgdGhpcy4kLnV0aWxzLmV4aXN0cyh0aGlzLiQuZW52LnBhdGhzLm1ldGVvckFwcC5jb3Jkb3ZhQnVpbGRQcm9ncmFtSnNvbikgJiZcbiAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLm9sZE1hbmlmZXN0IHx8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLm9sZE1hbmlmZXN0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9sZE1hbmlmZXN0ICE9PSBmcy5yZWFkRmlsZVN5bmMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kLmVudi5wYXRocy5tZXRlb3JBcHAuY29yZG92YUJ1aWxkUHJvZ3JhbUpzb24sICdVVEYtOCcpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiQudXRpbHMuZXhpc3RzKHRoaXMuJC5lbnYucGF0aHMubWV0ZW9yQXBwLndlYkNvcmRvdmFQcm9ncmFtSnNvbikgJiZcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAhdGhpcy5vbGRNYW5pZmVzdCB8fFxuICAgICAgICAgICAgICAgICh0aGlzLm9sZE1hbmlmZXN0ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2xkTWFuaWZlc3QgIT09IGZzLnJlYWRGaWxlU3luYyhcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJC5lbnYucGF0aHMubWV0ZW9yQXBwLndlYkNvcmRvdmFQcm9ncmFtSnNvbiwgJ1VURi04JylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGFjcXVpcmVJbmRleCgpIHtcbiAgICAgICAgY29uc3QgcG9ydCA9ICh0aGlzLiQuZW52Lm9wdGlvbnMucG9ydCkgPyB0aGlzLiQuZW52Lm9wdGlvbnMucG9ydCA6IDMwODA7XG4gICAgICAgIHRoaXMubG9nLmluZm8oJ2FjcXVpcmluZyBpbmRleC5odG1sJyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBodHRwOi8vMTI3LjAuMC4xOiR7cG9ydH0vX19jb3Jkb3ZhL2luZGV4Lmh0bWxgKTtcbiAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICAgIC8vIFNpbXBsZSB0ZXN0IGlmIHdlIHJlYWxseSBkb3dubG9hZCBpbmRleC5odG1sIGZvciB3ZWIuY29yZG92YS5cbiAgICAgICAgaWYgKH50ZXh0LmluZGV4T2YoJ3NyYz1cIi9jb3Jkb3ZhLmpzXCInKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFzeW5jIGFjcXVpcmVNYW5pZmVzdCgpIHtcbiAgICAgICAgY29uc3QgcG9ydCA9ICh0aGlzLiQuZW52Lm9wdGlvbnMucG9ydCkgPyB0aGlzLiQuZW52Lm9wdGlvbnMucG9ydCA6IDMwODA7XG4gICAgICAgIHRoaXMubG9nLmluZm8oJ2FjcXVpcmluZyBtYW5pZmVzdC5qc29uJyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgICAgYGh0dHA6Ly8xMjcuMC4wLjE6JHtwb3J0fS9fX2NvcmRvdmEvbWFuaWZlc3QuanNvbj9tZXRlb3JfZG9udF9zZXJ2ZV9pbmRleD10cnVlYCk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0ZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmllcyB0byBnZXQgYSBtb2JpbGUgYnVpbGQgZnJvbSBtZXRlb3IgYXBwLlxuICAgICAqIEluIGNhc2Ugb2YgZmFpbHVyZSBsZWF2ZXMgYSBtZXRlb3IubG9nLlxuICAgICAqIEEgbG90IG9mIHN0dWZmIGlzIGhhcHBlbmluZyBoZXJlIC0gYnV0IHRoZSBtYWluIGFpbSBpcyB0byBnZXQgYSBtb2JpbGUgYnVpbGQgZnJvbVxuICAgICAqIC5tZXRlb3IvbG9jYWwvY29yZG92YS1idWlsZC93d3cvYXBwbGljYXRpb24gYW5kIGV4aXQgYXMgc29vbiBhcyBwb3NzaWJsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIGJ1aWxkTW9iaWxlVGFyZ2V0KCkge1xuICAgICAgICBjb25zdCBwcm9ncmFtSnNvbiA9XG4gICAgICAgICAgICAodGhpcy5pbmRleEhUTUxzdHJhdGVneSA9PT0gdGhpcy5pbmRleEhUTUxTdHJhdGVnaWVzLklOREVYX0ZST01fQ09SRE9WQV9CVUlMRCkgP1xuICAgICAgICAgICAgICAgIHRoaXMuJC5lbnYucGF0aHMubWV0ZW9yQXBwLmNvcmRvdmFCdWlsZFByb2dyYW1Kc29uIDpcbiAgICAgICAgICAgICAgICB0aGlzLiQuZW52LnBhdGhzLm1ldGVvckFwcC53ZWJDb3Jkb3ZhUHJvZ3JhbUpzb247XG5cbiAgICAgICAgaWYgKHRoaXMuJC51dGlscy5leGlzdHMocHJvZ3JhbUpzb24pKSB7XG4gICAgICAgICAgICB0aGlzLm9sZE1hbmlmZXN0ID0gZnMucmVhZEZpbGVTeW5jKHByb2dyYW1Kc29uLCAnVVRGLTgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGxldCBsb2cgPSAnJztcbiAgICAgICAgICAgIGxldCBkZXNpcmVkRXhpdCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGJ1aWxkVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgZXJyb3JUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBsZXQga2lsbFRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGNvcmRvdmFDaGVja0ludGVydmFsID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBwb3J0UHJvYmxlbSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB3aW5kb3dzS2lsbChwaWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmxvZy5kZWJ1Zyhga2lsbGluZyBwaWQ6ICR7cGlkfWApO1xuICAgICAgICAgICAgICAgIHNwYXduLnN5bmMoJ3Rhc2traWxsJywgWycvcGlkJywgcGlkLCAnL2YnLCAnL3QnXSk7XG5cbiAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIGxvb2sgZm9yIG90aGVyIHByb2Nlc3Mgd2hpY2ggbWlnaHQgaGF2ZSBiZWVuIGNyZWF0ZWQgb3V0c2lkZSB0aGVcbiAgICAgICAgICAgICAgICAvLyBwcm9jZXNzIHRyZWUuXG4gICAgICAgICAgICAgICAgLy8gTGV0cyBsaXN0IGFsbCBub2RlLmV4ZSBwcm9jZXNzZXMuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0ID0gc3Bhd25cbiAgICAgICAgICAgICAgICAgICAgLnN5bmMoXG4gICAgICAgICAgICAgICAgICAgICAgICAnd21pYycsXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3Byb2Nlc3MnLCAnd2hlcmUnLCAnY2FwdGlvbj1cIm5vZGUuZXhlXCInLCAnZ2V0JywgJ2NvbW1hbmRsaW5lLHByb2Nlc3NpZCddKVxuICAgICAgICAgICAgICAgICAgICAuc3Rkb3V0LnRvU3RyaW5nKCd1dGYtOCcpXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IHNlbGYucHJlcGFyZUFyZ3VtZW50cygpO1xuICAgICAgICAgICAgICAgIC8vIExldHMgbW91bnQgcmVnZXguXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXhWMSA9IG5ldyBSZWdFeHAoYCR7YXJncy5qb2luKCdcXFxccysnKX1cXFxccysoXFxcXGQrKWAsICdnbScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4VjIgPSBuZXcgUmVnRXhwKGBcIiR7YXJncy5qb2luKCdcIlxcXFxzK1wiJyl9XCJcXFxccysoXFxcXGQrKWAsICdnbScpO1xuICAgICAgICAgICAgICAgIC8vIE5vIHdlIHdpbGwgY2hlY2sgZm9yIHRob3NlIHdpdGggdGhlIG1hdGNoaW5nIHBhcmFtcy5cbiAgICAgICAgICAgICAgICBvdXQuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IHJlZ2V4VjEuZXhlYyhsaW5lKSB8fCByZWdleFYyLmV4ZWMobGluZSkgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2cuZGVidWcoYGtpbGxpbmcgcGlkOiAke21hdGNoWzFdfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhd24uc3luYygndGFza2tpbGwnLCBbJy9waWQnLCBtYXRjaFsxXSwgJy9mJywgJy90J10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdyaXRlTG9nKCkge1xuICAgICAgICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMoJ21ldGVvci5sb2cnLCBsb2csICdVVEYtOCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbGVhclRpbWVvdXRzQW5kSW50ZXJ2YWxzKCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY29yZG92YUNoZWNrSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChidWlsZFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChlcnJvclRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChtZXNzYWdlVGltZW91dCk7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGtpbGxUaW1lb3V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYXJncyA9IHRoaXMucHJlcGFyZUFyZ3VtZW50cygpO1xuXG4gICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBydW5uaW5nIFwibWV0ZW9yICR7YXJncy5qb2luKCcgJyl9XCIuLi4gdGhpcyBtaWdodCB0YWtlIGEgd2hpbGVgKTtcblxuICAgICAgICAgICAgLy8gTGV0cyBzcGF3biBtZXRlb3IuXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHNwYXduKFxuICAgICAgICAgICAgICAgICdtZXRlb3InLFxuICAgICAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbnY6IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgICAgICAgICAgICB7IE1FVEVPUl9QUkVUVFlfT1VUUFVUOiAwLCBNRVRFT1JfTk9fUkVMRUFTRV9DSEVDSzogMSB9LCBwcm9jZXNzLmVudiksXG4gICAgICAgICAgICAgICAgICAgIGN3ZDogdGhpcy4kLmVudi5wYXRocy5tZXRlb3JBcHAucm9vdFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyBzaGVsbDogdHJ1ZSB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBLaWxscyB0aGUgY3VycmVudGx5IHJ1bm5pbmcgbWV0ZW9yIGNvbW1hbmQuXG4gICAgICAgICAgICBmdW5jdGlvbiBraWxsKCkge1xuICAgICAgICAgICAgICAgIHNsbCgnJyk7XG4gICAgICAgICAgICAgICAgY2hpbGQua2lsbCgnU0lHS0lMTCcpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLiQuZW52Lm9zLmlzV2luZG93cykge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3dzS2lsbChjaGlsZC5waWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZXhpdCgpIHtcbiAgICAgICAgICAgICAgICBraWxsVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXRzQW5kSW50ZXJ2YWxzKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlc2lyZWRFeGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAga2lsbCgpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29weUJ1aWxkKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY29weUJ1aWxkKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4aXQoKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dHNBbmRJbnRlcnZhbHMoKTtcbiAgICAgICAgICAgICAgICAgICAga2lsbCgpO1xuICAgICAgICAgICAgICAgICAgICB3cml0ZUxvZygpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoJ2NvcHknKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29yZG92YUNoZWNrSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGNvcmRvdmEtYnVpbGQgcmVhZHkuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDb3Jkb3ZhQnVpbGRSZWFkeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHNvLCB0aGVuIGV4aXQgaW1tZWRpYXRlbHkuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluZGV4SFRNTHN0cmF0ZWd5ID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleEhUTUxTdHJhdGVnaWVzLklOREVYX0ZST01fQ09SRE9WQV9CVUlMRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29weUJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICAgICAgY2hpbGQuc3RkZXJyLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IGNodW5rLnRvU3RyaW5nKCdVVEYtOCcpO1xuICAgICAgICAgICAgICAgIGxvZyArPSBgJHtsaW5lfVxcbmA7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoZXJyb3JUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCF+bGluZS5pbmRleE9mKCctLXByb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIGV4aXQgMXMgYWZ0ZXIgbGFzdCBlcnJvciBpbiBzdGRlcnIuXG4gICAgICAgICAgICAgICAgICAgIGVycm9yVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0c0FuZEludGVydmFscygpO1xuICAgICAgICAgICAgICAgICAgICAgICAga2lsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVMb2coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNoaWxkLnN0ZG91dC5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBjaHVuay50b1N0cmluZygnVVRGLTgnKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRlc2lyZWRFeGl0ICYmIGxpbmUudHJpbSgpLnJlcGxhY2UoL1tcXG5cXHJcXHRcXHZcXGZdKy9nbSwgJycpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lc1RvRGlzcGxheSA9IGxpbmUudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJ1xcblxccicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGRpc3BsYXkgbGFzdCBsaW5lIGZyb20gdGhlIGNodW5rLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzYW5pdGl6ZWRMaW5lID0gbGluZXNUb0Rpc3BsYXkucG9wKCkucmVwbGFjZSgvW1xcblxcclxcdFxcdlxcZl0rL2dtLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHNsbChzYW5pdGl6ZWRMaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9nICs9IGAke2xpbmV9XFxuYDtcbiAgICAgICAgICAgICAgICBpZiAofmxpbmUuaW5kZXhPZignYWZ0ZXJfcGxhdGZvcm1fYWRkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xsKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbygnZG9uZS4uLiAxMCUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAofmxpbmUuaW5kZXhPZignTG9jYWwgcGFja2FnZSB2ZXJzaW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobWVzc2FnZVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGwoJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbygnYnVpbGRpbmcgaW4gcHJvZ3Jlc3MuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKH5saW5lLmluZGV4T2YoJ1ByZXBhcmluZyBDb3Jkb3ZhIHByb2plY3QnKSkge1xuICAgICAgICAgICAgICAgICAgICBzbGwoJycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKCdkb25lLi4uIDYwJScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh+bGluZS5pbmRleE9mKCdDYW5cXCd0IGxpc3RlbiBvbiBwb3J0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9ydFByb2JsZW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh+bGluZS5pbmRleE9mKCdZb3VyIGFwcGxpY2F0aW9uIGhhcyBlcnJvcnMnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoZXJyb3JUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlcnJvclRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dHNBbmRJbnRlcnZhbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlTG9nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ2Vycm9ySW5BcHAnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKH5saW5lLmluZGV4T2YoJ0FwcCBydW5uaW5nIGF0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29weUJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFdoZW4gTWV0ZW9yIGV4aXRzXG4gICAgICAgICAgICBjaGlsZC5vbignZXhpdCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBzbGwoJycpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dHNBbmRJbnRlcnZhbHMoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRlc2lyZWRFeGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlTG9nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3J0UHJvYmxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdwb3J0Jyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ2V4aXQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBidWlsZFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBraWxsKCk7XG4gICAgICAgICAgICAgICAgd3JpdGVMb2coKTtcbiAgICAgICAgICAgICAgICByZWplY3QoJ3RpbWVvdXQnKTtcbiAgICAgICAgICAgIH0sIHRoaXMuJC5lbnYub3B0aW9ucy5idWlsZFRpbWVvdXQgPyB0aGlzLiQuZW52Lm9wdGlvbnMuYnVpbGRUaW1lb3V0ICogMTAwMCA6IDYwMDAwMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZURkcFVybChpbmRleEh0bWwpIHtcbiAgICAgICAgbGV0IGNvbnRlbnQ7XG4gICAgICAgIGxldCBydW50aW1lQ29uZmlnO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGluZGV4SHRtbCwgJ1VURi04Jyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKGBlcnJvciBsb2FkaW5nIGluZGV4Lmh0bWwgZmlsZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoZXIudGVzdChjb250ZW50KSkge1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJ1bnRpbWUgY29uZmlnIGluIGluZGV4IGZpbGUnKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gY29udGVudC5tYXRjaCh0aGlzLm1hdGNoZXIpO1xuICAgICAgICAgICAgcnVudGltZUNvbmZpZyA9IEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJ1bnRpbWUgY29uZmlnIGluIGluZGV4IGZpbGUnKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLiQuZW52Lm9wdGlvbnMuZGRwVXJsLnN1YnN0cigtMSwgMSkgIT09ICcvJykge1xuICAgICAgICAgICAgdGhpcy4kLmVudi5vcHRpb25zLmRkcFVybCArPSAnLyc7XG4gICAgICAgIH1cblxuICAgICAgICBydW50aW1lQ29uZmlnLlJPT1RfVVJMID0gdGhpcy4kLmVudi5vcHRpb25zLmRkcFVybDtcbiAgICAgICAgcnVudGltZUNvbmZpZy5ERFBfREVGQVVMVF9DT05ORUNUSU9OX1VSTCA9IHRoaXMuJC5lbnYub3B0aW9ucy5kZHBVcmw7XG5cbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZXIsIGAkMVwiJHtlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocnVudGltZUNvbmZpZykpfVwiJDNgKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhpbmRleEh0bWwsIGNvbnRlbnQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5lcnJvcihgZXJyb3Igd3JpdGluZyBpbmRleC5odG1sIGZpbGU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nLmluZm8oJ3N1Y2Nlc3NmdWxseSB1cGRhdGVkIGRkcCBzdHJpbmcgaW4gdGhlIHJ1bnRpbWUgY29uZmlnIG9mIGEgbW9iaWxlIGJ1aWxkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZXMgdGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYG1ldGVvcmAgY29tbWFuZC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAgICovXG4gICAgcHJlcGFyZUFyZ3VtZW50cygpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IFsncnVuJywgJy0tdmVyYm9zZScsIGAtLW1vYmlsZS1zZXJ2ZXI9JHt0aGlzLiQuZW52Lm9wdGlvbnMuZGRwVXJsfWBdO1xuICAgICAgICBpZiAodGhpcy4kLmVudi5pc1Byb2R1Y3Rpb25CdWlsZCgpKSB7XG4gICAgICAgICAgICBhcmdzLnB1c2goJy0tcHJvZHVjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MucHVzaCgnLXAnKTtcbiAgICAgICAgaWYgKHRoaXMuJC5lbnYub3B0aW9ucy5wb3J0KSB7XG4gICAgICAgICAgICBhcmdzLnB1c2godGhpcy4kLmVudi5vcHRpb25zLnBvcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJncy5wdXNoKCczMDgwJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBtb2JpbGUgYnVpbGQgYW5kIGNvcGllcyBpdCBpbnRvIGVsZWN0cm9uIGFwcC5cbiAgICAgKi9cbiAgICBhc3luYyBjb3B5QnVpbGQoKSB7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdjbGVhcmluZyBidWlsZCBkaXInKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuJC51dGlscy5ybVdpdGhSZXRyaWVzKCctcmYnLCB0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLm1ldGVvckFwcCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcmVmaXggPSAnY29yZG92YUJ1aWxkJztcbiAgICAgICAgbGV0IGNvcHlQYXRoUG9zdGZpeCA9ICcnO1xuXG4gICAgICAgIGlmICh0aGlzLmluZGV4SFRNTHN0cmF0ZWd5ID09PSB0aGlzLmluZGV4SFRNTFN0cmF0ZWdpZXMuSU5ERVhfRlJPTV9SVU5OSU5HX1NFUlZFUikge1xuICAgICAgICAgICAgcHJlZml4ID0gJ3dlYkNvcmRvdmEnO1xuICAgICAgICAgICAgY29weVBhdGhQb3N0Zml4ID0gYCR7cGF0aC5zZXB9KmA7XG4gICAgICAgICAgICBsZXQgaW5kZXhIdG1sO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmcy5ta2Rpcih0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLm1ldGVvckFwcCk7XG4gICAgICAgICAgICAgICAgaW5kZXhIdG1sID0gYXdhaXQgdGhpcy5hY3F1aXJlSW5kZXgoKTtcbiAgICAgICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKHRoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAubWV0ZW9yQXBwSW5kZXgsIGluZGV4SHRtbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbygnc3VjY2Vzc2Z1bGx5IGRvd25sb2FkZWQgaW5kZXguaHRtbCBmcm9tIHJ1bm5pbmcgbWV0ZW9yIGFwcCcpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdlcnJvciB3aGlsZSB0cnlpbmcgdG8gZG93bmxvYWQgaW5kZXguaHRtbCBmb3Igd2ViLmNvcmRvdmEsICcgK1xuICAgICAgICAgICAgICAgICAgICAnYmUgc3VyZSB0aGF0IHlvdSBhcmUgcnVubmluZyBhIG1vYmlsZSB0YXJnZXQgb3Igd2l0aCcgK1xuICAgICAgICAgICAgICAgICAgICAnIC0tbW9iaWxlLXNlcnZlcjogJywgZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvcmRvdmFCdWlsZCA9IHRoaXMuJC5lbnYucGF0aHMubWV0ZW9yQXBwW3ByZWZpeF07XG4gICAgICAgIGNvbnN0IGNvcmRvdmFCdWlsZEluZGV4ID0gdGhpcy4kLmVudi5wYXRocy5tZXRlb3JBcHAuY29yZG92YUJ1aWxkSW5kZXg7XG4gICAgICAgIGNvbnN0IGNvcmRvdmFCdWlsZFByb2dyYW1Kc29uID0gdGhpcy4kLmVudi5wYXRocy5tZXRlb3JBcHBbYCR7cHJlZml4fVByb2dyYW1Kc29uYF07XG5cbiAgICAgICAgaWYgKCF0aGlzLiQudXRpbHMuZXhpc3RzKGNvcmRvdmFCdWlsZCkpIHtcbiAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKGBubyBtb2JpbGUgYnVpbGQgZm91bmQgYXQgJHtjb3Jkb3ZhQnVpbGR9YCk7XG4gICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignYXJlIHlvdSBzdXJlIHlvdSBkaWQgcnVuIG1ldGVvciB3aXRoIC0tbW9iaWxlLXNlcnZlcj8nKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmVxdWlyZWQgZmlsZSBub3QgcHJlc2VudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLiQudXRpbHMuZXhpc3RzKGNvcmRvdmFCdWlsZFByb2dyYW1Kc29uKSkge1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ25vIHByb2dyYW0uanNvbiBmb3VuZCBpbiBtb2JpbGUgYnVpbGQgZm91bmQgYXQgJyArXG4gICAgICAgICAgICAgICAgYCR7Y29yZG92YUJ1aWxkfWApO1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ2FyZSB5b3Ugc3VyZSB5b3UgZGlkIHJ1biBtZXRlb3Igd2l0aCAtLW1vYmlsZS1zZXJ2ZXI/Jyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVpcmVkIGZpbGUgbm90IHByZXNlbnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmluZGV4SFRNTHN0cmF0ZWd5ICE9PSB0aGlzLmluZGV4SFRNTFN0cmF0ZWdpZXMuSU5ERVhfRlJPTV9SVU5OSU5HX1NFUlZFUikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLiQudXRpbHMuZXhpc3RzKGNvcmRvdmFCdWlsZEluZGV4KSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdubyBpbmRleC5odG1sIGZvdW5kIGluIGNvcmRvdmEgYnVpbGQgZm91bmQgYXQgJyArXG4gICAgICAgICAgICAgICAgICAgIGAke2NvcmRvdmFCdWlsZH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignYXJlIHlvdSBzdXJlIHlvdSBkaWQgcnVuIG1ldGVvciB3aXRoIC0tbW9iaWxlLXNlcnZlcj8nKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVpcmVkIGZpbGUgbm90IHByZXNlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9nLnZlcmJvc2UoJ2NvcHlpbmcgbW9iaWxlIGJ1aWxkJyk7XG4gICAgICAgIHNoZWxsLmNwKFxuICAgICAgICAgICAgJy1SJywgYCR7Y29yZG92YUJ1aWxkfSR7Y29weVBhdGhQb3N0Zml4fWAsIHRoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAubWV0ZW9yQXBwXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gQmVjYXVzZSBvZiB2YXJpb3VzIHBlcm1pc3Npb24gcHJvYmxlbXMgaGVyZSB3ZSB0cnkgdG8gY2xlYXIgdGUgcGF0aCBieSBjbGVhcmluZ1xuICAgICAgICAvLyBhbGwgcG9zc2libGUgcmVzdHJpY3Rpb25zLlxuICAgICAgICBzaGVsbC5jaG1vZChcbiAgICAgICAgICAgICctUicsICc3NzcnLCB0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLm1ldGVvckFwcFxuICAgICAgICApO1xuICAgICAgICBpZiAodGhpcy4kLmVudi5vcy5pc1dpbmRvd3MpIHtcbiAgICAgICAgICAgIHNoZWxsLmV4ZWMoYGF0dHJpYiAtciAke3RoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAubWV0ZW9yQXBwfSR7cGF0aC5zZXB9Ki4qIC9zYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbmRleEhUTUxzdHJhdGVneSA9PT0gdGhpcy5pbmRleEhUTUxTdHJhdGVnaWVzLklOREVYX0ZST01fUlVOTklOR19TRVJWRVIpIHtcbiAgICAgICAgICAgIGxldCBwcm9ncmFtSnNvbjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbUpzb24gPSBhd2FpdCB0aGlzLmFjcXVpcmVNYW5pZmVzdCgpO1xuICAgICAgICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAubWV0ZW9yQXBwUHJvZ3JhbUpzb24sXG4gICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByb2dyYW1Kc29uLCBudWxsLCA0KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbygnc3VjY2Vzc2Z1bGx5IGRvd25sb2FkZWQgbWFuaWZlc3QuanNvbiBmcm9tIHJ1bm5pbmcgbWV0ZW9yIGFwcCcpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdlcnJvciB3aGlsZSB0cnlpbmcgdG8gZG93bmxvYWQgbWFuaWZlc3QuanNvbiBmb3Igd2ViLmNvcmRvdmEsJyArXG4gICAgICAgICAgICAgICAgICAgICcgYmUgc3VyZSB0aGF0IHlvdSBhcmUgcnVubmluZyBhIG1vYmlsZSB0YXJnZXQgb3Igd2l0aCcgK1xuICAgICAgICAgICAgICAgICAgICAnIC0tbW9iaWxlLXNlcnZlcjogJywgZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9nLmluZm8oJ21vYmlsZSBidWlsZCBjb3BpZWQgdG8gZWxlY3Ryb24gYXBwJyk7XG5cbiAgICAgICAgdGhpcy5sb2cuZGVidWcoJ2NvcHkgY29yZG92YS5qcyB0byBtZXRlb3IgYnVpbGQnKTtcbiAgICAgICAgc2hlbGwuY3AoXG4gICAgICAgICAgICBqb2luKF9fZGlybmFtZSwgJy4uJywgJ3NrZWxldG9uJywgJ2NvcmRvdmEuanMnKSxcbiAgICAgICAgICAgIHRoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAubWV0ZW9yQXBwXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5qZWN0cyBNZXRlb3IuaXNEZXNrdG9wXG4gICAgICovXG4gICAgaW5qZWN0SXNEZXNrdG9wKCkge1xuICAgICAgICB0aGlzLmxvZy5pbmZvKCdpbmplY3RpbmcgaXNEZXNrdG9wJyk7XG5cbiAgICAgICAgbGV0IG1hbmlmZXN0SnNvblBhdGggPSB0aGlzLiQuZW52LnBhdGhzLm1ldGVvckFwcC5jb3Jkb3ZhQnVpbGRQcm9ncmFtSnNvbjtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXhIVE1Mc3RyYXRlZ3kgPT09IHRoaXMuaW5kZXhIVE1MU3RyYXRlZ2llcy5JTkRFWF9GUk9NX1JVTk5JTkdfU0VSVkVSKSB7XG4gICAgICAgICAgICBtYW5pZmVzdEpzb25QYXRoID0gdGhpcy4kLmVudi5wYXRocy5tZXRlb3JBcHAud2ViQ29yZG92YVByb2dyYW1Kc29uO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG1hbmlmZXN0ID0gSlNPTi5wYXJzZShcbiAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZVN5bmMobWFuaWZlc3RKc29uUGF0aCwgJ1VURi04JylcbiAgICAgICAgICAgICkubWFuaWZlc3Q7XG4gICAgICAgICAgICBsZXQgaW5qZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpbmplY3RlZFN0YXJ0dXBEaWRDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIFdlIHdpbGwgc2VhcmNoIGluIGV2ZXJ5IC5qcyBmaWxlIGluIHRoZSBtYW5pZmVzdC5cbiAgICAgICAgICAgIC8vIFdlIGNvdWxkIHByb2JhYmx5IGRldGVjdCB3aGV0aGVyIHRoaXMgaXMgYSBkZXYgb3IgcHJvZHVjdGlvbiBidWlsZCBhbmQgb25seSBzZWFyY2ggaW5cbiAgICAgICAgICAgIC8vIHRoZSBjb3JyZWN0IGZpbGVzLCBidXQgZm9yIG5vdyB0aGlzIHNob3VsZCBiZSBmaW5lLlxuICAgICAgICAgICAgbWFuaWZlc3QuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBmaWxlQ29udGVudHM7XG4gICAgICAgICAgICAgICAgLy8gSGFja3kgd2F5IG9mIHNldHRpbmcgaXNEZXNrdG9wLlxuICAgICAgICAgICAgICAgIGlmIChmaWxlLnR5cGUgPT09ICdqcycpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZUNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKFxuICAgICAgICAgICAgICAgICAgICAgICAgam9pbih0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLm1ldGVvckFwcCwgZmlsZS5wYXRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVVEYtOCdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5pbmplY3Rvci5wcm9jZXNzRmlsZUNvbnRlbnRzKGZpbGVDb250ZW50cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgZmlsZUNvbnRlbnRzID0gcmVzdWx0LmZpbGVDb250ZW50cztcbiAgICAgICAgICAgICAgICAgICAgaW5qZWN0ZWRTdGFydHVwRGlkQ29tcGxldGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmluamVjdGVkU3RhcnR1cERpZENvbXBsZXRlID8gdHJ1ZSA6IGluamVjdGVkU3RhcnR1cERpZENvbXBsZXRlO1xuICAgICAgICAgICAgICAgICAgICBpbmplY3RlZCA9IHJlc3VsdC5pbmplY3RlZCA/IHRydWUgOiBpbmplY3RlZDtcblxuICAgICAgICAgICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKFxuICAgICAgICAgICAgICAgICAgICAgICAgam9pbih0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLm1ldGVvckFwcCwgZmlsZS5wYXRoKSwgZmlsZUNvbnRlbnRzXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghaW5qZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignZXJyb3IgaW5qZWN0aW5nIGlzRGVza3RvcCBnbG9iYWwgdmFyLicpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW5qZWN0ZWRTdGFydHVwRGlkQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignZXJyb3IgaW5qZWN0aW5nIGlzRGVza3RvcCBmb3Igc3RhcnR1cERpZENvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignZXJyb3Igb2NjdXJyZWQgd2hpbGUgaW5qZWN0aW5nIGlzRGVza3RvcDogJywgZSk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2cuaW5mbygnaW5qZWN0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzLCBtb2RpZmllcyBhbmQgY29waWVzIHRoZSBtZXRlb3IgYXBwIHRvIGVsZWN0cm9uIGFwcC5cbiAgICAgKi9cbiAgICBhc3luYyBidWlsZCgpIHtcbiAgICAgICAgdGhpcy5sb2cuaW5mbygnY2hlY2tpbmcgZm9yIGFueSBtb2JpbGUgcGxhdGZvcm0nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2tQcmVjb25kaXRpb25zKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdlcnJvciBvY2N1cnJlZCBkdXJpbmcgY2hlY2tpbmcgcHJlY29uZGl0aW9uczogJywgZSk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxvZy5pbmZvKCdidWlsZGluZyBtZXRlb3IgYXBwJyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLiQuZW52Lm9wdGlvbnMuc2tpcE1vYmlsZUJ1aWxkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYnVpbGRNb2JpbGVUYXJnZXQoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RpbWVvdXQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWVvdXQgd2hpbGUgYnVpbGRpbmcsIGxvZyBoYXMgYmVlbiB3cml0dGVuIHRvIG1ldGVvci5sb2cnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc29tZSBlcnJvcnMgd2VyZSByZXBvcnRlZCBkdXJpbmcgYnVpbGQsIGNoZWNrIG1ldGVvci5sb2cgZm9yIG1vcmUnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIGluZm8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdlcnJvckluQXBwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5b3VyIG1ldGVvciBhcHAgaGFzIGVycm9ycyAtIGxvb2sgaW50byBtZXRlb3IubG9nIGZvciBtb3JlJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBpbmZvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9ydCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneW91ciBwb3J0IDMwODAgaXMgY3VycmVudGx5IHVzZWQgKHlvdSBwcm9iYWJseSBoYXZlIHRoaXMgb3Igb3RoZXIgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21ldGVvciBwcm9qZWN0IHJ1bm5pbmc/KSwgdXNlIGAtdGAgb3IgYC0tbWV0ZW9yLXBvcnRgIHRvIHVzZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlmZmVyZW50IHBvcnQgd2hpbGUgYnVpbGRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdleGl0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtZXRlb3IgY21kIGV4aXRlZCB1bmV4cGVjdGVkbHksIGxvZyBoYXMgYmVlbiB3cml0dGVuIHRvIG1ldGVvci5sb2cnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb3B5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvciBlbmNvdW50ZXJlZCB3aGVuIGNvcHlpbmcgdGhlIGJ1aWxkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdlcnJvciBvY2N1cnJlZCBkdXJpbmcgYnVpbGRpbmcgbW9iaWxlIHRhcmdldCcsIHJlYXNvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vYmlsZVBsYXRmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlTW9iaWxlUGxhdGZvcm0odGhpcy5tb2JpbGVQbGF0Zm9ybSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhIVE1Mc3RyYXRlZ3kgPSB0aGlzLmNob29zZVN0cmF0ZWd5KCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY29weUJ1aWxkKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbmplY3RJc0Rlc2t0b3AoKTtcblxuICAgICAgICB0aGlzLmNoYW5nZURkcFVybCgpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBhY2tUb0FzYXIoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ2Vycm9yIHdoaWxlIHBhY2tpbmcgbWV0ZW9yIGFwcCB0byBhc2FyJyk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxvZy5pbmZvKCdtZXRlb3IgYnVpbGQgZmluaXNoZWQnKTtcblxuICAgICAgICBpZiAodGhpcy5tb2JpbGVQbGF0Zm9ybSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZW1vdmVNb2JpbGVQbGF0Zm9ybSh0aGlzLm1vYmlsZVBsYXRmb3JtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYW5nZURkcFVybCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJC5lbnYub3B0aW9ucy5kZHBVcmwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVEZHBVcmwodGhpcy4kLmVudi5wYXRocy5lbGVjdHJvbkFwcC5tZXRlb3JBcHBJbmRleCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoYGVycm9yIHdoaWxlIHRyeWluZyB0byBjaGFuZ2UgdGhlIGRkcCB1cmw6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFja1RvQXNhcigpIHtcbiAgICAgICAgdGhpcy5sb2cuaW5mbygncGFja2luZyBtZXRlb3IgYXBwIHRvIGFzYXIgYXJjaGl2ZScpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgICAgICAgIGFzYXIuY3JlYXRlUGFja2FnZShcbiAgICAgICAgICAgICAgICB0aGlzLiQuZW52LnBhdGhzLmVsZWN0cm9uQXBwLm1ldGVvckFwcCxcbiAgICAgICAgICAgICAgICBwYXRoLmpvaW4odGhpcy4kLmVudi5wYXRocy5lbGVjdHJvbkFwcC5yb290LCAnbWV0ZW9yLmFzYXInKSxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9uIFdpbmRvd3Mgc29tZSBmaWxlcyBtaWdodCBzdGlsbCBiZSBibG9ja2VkLiBHaXZpbmcgYSB0aWNrIGZvciB0aGVtIHRvIGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlYWR5IGZvciBkZWxldGlvbi5cbiAgICAgICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLnZlcmJvc2UoJ2NsZWFyaW5nIG1ldGVvciBhcHAgYWZ0ZXIgcGFja2luZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kLnV0aWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJtV2l0aFJldHJpZXMoJy1yZicsIHRoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAubWV0ZW9yQXBwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==